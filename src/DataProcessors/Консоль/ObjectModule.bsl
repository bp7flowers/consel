Перем мВерсияОбработки;

Перем ТипNULL;
Перем ТипСтруктура;
Перем ТипСписокЗначений;
Перем ТипГраница;
Перем ТипМоментВремени;
Перем ТипДата;
Перем ТипБулево;
Перем ТипРезультатЗапроса;
Перем ТипСтрока;
Перем ТипЧисло;
Перем ТипМассив;
Перем ТипРисунокТабличногоДокумента;
Перем ТипТип;

Перем ОТСтрока;
Перем ОТБулево;
Перем ОТДата;
Перем ОТТаблицаЗначений;
Перем ОТНеопределено;
Перем ОТNULL;
Перем ОТУникальныйИдентификатор;
Перем ОТМоментВремени;
Перем ОТЧисло;
Перем ОТКартинка;

Перем ТипВсеСсылки_Документы;
Перем ТипВсеСсылки_Справочники;
Перем ТипВсеСсылки_ПланыСчетов;
Перем ТипВсеСсылки_ПланыВидовХарактеристик;
Перем ТипВсеСсылки_ПланыВидовРасчета;
Перем ТипВсеСсылки_Перечисления;
Перем ТипВсеСсылки_ПланыОбмена;

Процедура ОбработатьЗапрос(ппСтруктураДанных = Неопределено, ппМВТ = Неопределено) Экспорт

	Если ппСтруктураДанных = Неопределено Тогда
		ппПутьКХранилищу = ЭтотОбъект.ПутьКХранилищу;
		ппХранилище = ПолучитьИзВременногоХранилища(ппПутьКХранилищу);
	Иначе
		ппХранилище = ппСтруктураДанных;
	КонецЕсли;

	ппХранилище.СтруктураРезультатовЗапросов.Очистить();

	ЗапросИД = ппХранилище.ОписаниеТекущейВеткиДЗ.ИД;

	ппОтбор = Новый Структура("ИД", ЗапросИД);
	МассивПараметров = ппХранилище.ТабПараметров.НайтиСтроки(ппОтбор);

	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбластьСтрока = ОбщийТабДок.ПолучитьОбласть("R2");

	ппЗапрос = Новый Запрос;
	Если ппМВТ = Неопределено Тогда
		ппЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Иначе
		ппЗапрос.МенеджерВременныхТаблиц = ппМВТ;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	МассивСообщений = Новый Массив;

	// Установка параметров
	Для Каждого Элемент Из МассивПараметров Цикл
		Если Элемент.Используется Тогда

			Если Элемент.Вычисляемый Тогда
				Попытка
					ОписаниеОшибки = ПроверитНаличиеИспользуемыхПеременных(Элемент.Значение);
					Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
						ЕстьОшибки = Истина;
						СообщениеП = Новый СообщениеПользователю;
						СообщениеП.Текст = ОписаниеОшибки;
						МассивСообщений.Добавить(СообщениеП);
					Иначе
						Параметр = Неопределено;
						Выполнить(Элемент.Значение);
						ппЗапрос.УстановитьПараметр(Элемент.Название,Параметр);
					КонецЕсли;
				Исключение
					ЕстьОшибки = Истина;
					СообщениеП = Новый СообщениеПользователю;
					ОписаниеОшибки = ИнформацияОбОшибке();
					СообщениеП.Текст = ("Ошибка при установке параметра " + Элемент.Название + " " + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ОписаниеОшибки));
					МассивСообщений.Добавить(СообщениеП);
				КонецПопытки;
			Иначе
				ппЗапрос.УстановитьПараметр(Элемент.Название,Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЕстьОшибки Тогда

		ТаблицаПакетов = ппХранилище.ТаблицаПакетов.НайтиСтроки(ппОтбор);
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ЦветРамки = ЦветаСтиля.ЦветЛинииОтчета;
		ЦветФонаШапки = ЦветаСтиля.ЦветФонаШапкиОтчета;

		СтрокаПоиска = "А" + "_" + Строка(ЗапросИД) + "_";
		Для Каждого ЭлементСтруктуры Из ппХранилище.СтруктураТЗ Цикл
			Если СтрНайти(ЭлементСтруктуры.Ключ, СтрокаПоиска) Тогда
				Если ппХранилище.СтруктураТЗ.Свойство(ЭлементСтруктуры.Ключ) Тогда
					ппХранилище.СтруктураТЗ.Удалить(ЭлементСтруктуры.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Для Каждого СтрокаПакета Из ТаблицаПакетов Цикл

			ппЗапрос.Текст = СтрокаПакета.ТекстПакета;

			Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
			РезультатЗапроса = ппЗапрос.Выполнить();
			Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();

			ВремяВыполнения = (Конец - Начало) / 1000;
			СтрокаПакета.ВремяВыполнения = ВремяВыполнения;

			ТекСтрока = ОбщийТабДок.ВысотаТаблицы + 2;
			ОблЗаголовка = ОбщийТабДок.Область(ТекСтрока, 1);

			Если РезультатЗапроса = Неопределено Тогда
				Если СтрокаПакета.Показать Тогда
					ОблЗаголовка.Текст = СтрокаПакета.ТекстПакета + " (" + ВремяВыполнения + " мс.)";
					ОблЗаголовка.Шрифт = Новый Шрифт( , , 14, Истина);
					ОблЗаголовка.ЦветТекста = WebЦвета.Красный;
				КонецЕсли;
				Продолжить;
			КонецЕсли;

			Выборка = РезультатЗапроса.Выбрать();
			КоличествоСтрок = Выборка.Количество();

			Если СтрокаПакета.ЭтоВТ Тогда

				ппЗапрос.Текст = "ВЫБРАТЬ * ИЗ " + СтрокаПакета.ИмяПакета + " КАК Запрос_" + СтрЗаменить(Новый УникальныйИдентификатор,"-","");

				РезультатЗапроса = ппЗапрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				КоличествоСтрок = Выборка.Количество();
			КонецЕсли;
			СтрокаПакета.КоличествоСтрок = КоличествоСтрок;

			Если (НЕ СтрокаПакета.Выгрузить) И (НЕ СтрокаПакета.Показать) Тогда
				СтрокаПакета.Адрес = "";
				Продолжить;
			КонецЕсли;

			пВыгрузить = СтрокаПакета.Выгрузить;
			пПоказать = СтрокаПакета.Показать;

			Если ЭтотОбъект.ЛимитВыводимыхСтрок > 0 Тогда
				МаксКолСтрок = ЭтотОбъект.ЛимитВыводимыхСтрок;
				ВыгрузитьВместоПоказа = (КоличествоСтрок > МаксКолСтрок) И СтрокаПакета.Показать;

				Если ВыгрузитьВместоПоказа Тогда
					СтрокаПакета.Выгрузить = Истина;
					пВыгрузить = Истина;
					пПоказать = Ложь;

					ОблЗаголовка.Шрифт = Новый Шрифт( , , 14);
					ОблЗаголовка.Примечание.Текст = СтрокаПакета.ТекстПакета;
					ОблЗаголовка.Примечание.АвтоРазмер = Истина;
					ОблЗаголовка.Текст = СтрокаПакета.ИмяПакета + " (" + ВремяВыполнения + " мс., строк: " + Строка(КоличествоСтрок) + ")";

					ТекСтрока = ОбщийТабДок.ВысотаТаблицы + 2;
					ОблЗаголовка = ОбщийТабДок.Область(ТекСтрока, 1);

					ОблЗаголовка.Шрифт = Новый Шрифт( , , 14);
					ОблЗаголовка.Текст = "Данные таблицы не выведена в табличный документ, т.к. превышен лимит выводимых строк (максимум: " + МаксКолСтрок + " строк). Результат смотрите в выгрузке.";
				КонецЕсли;
			КонецЕсли;

			Если пВыгрузить Тогда
				Выгрузка = РезультатЗапроса.Выгрузить();

				Адрес = "А" + "_" + СтрЗаменить(СтрокаПакета.ИД, "-", "") + "_" + Строка(СтрокаПакета.ИмяПакета);
				ппХранилище.СтруктураТЗ.Вставить(Адрес, Выгрузка);
				СтрокаПакета.Адрес = Адрес;
			Иначе
				СтрокаПакета.Адрес = "";
			КонецЕсли;

			Если пПоказать Тогда

				ОблЗаголовка.Шрифт = Новый Шрифт( , , 14);
				ОблЗаголовка.Примечание.Текст = СтрокаПакета.ТекстПакета;
				ОблЗаголовка.Примечание.АвтоРазмер = Истина;
				ОблЗаголовка.Текст = СтрокаПакета.ИмяПакета + " (" + ВремяВыполнения + " мс., строк: " + Строка(КоличествоСтрок) + ")";
				ОблЗаголовка.Расшифровка = Новый Структура("РольЯчейки,ИмяПакета,ИД", "ЗаголовокТаблицы", СтрокаПакета.ИмяПакета, СтрокаПакета.ИД);

				ОбщийТабДок.НачатьАвтогруппировкуСтрок();

				Колонки = РезультатЗапроса.Колонки;
				ШириныКолонок = Новый Структура;

				КоличествоКолонок = Колонки.Количество();

				// Шапка таблицы.
				ОбластьСтрока.Очистить();
				Для СчКол = 1 По КоличествоКолонок Цикл
					ШириныКолонок.Вставить(Колонки[СчКол - 1].Имя, 0);
					ОблЯчейки = ОбластьСтрока.Область(1, СчКол);
					ОблЯчейки.Текст = Колонки[СчКол - 1].Имя;
					ОблЯчейки.ЦветФона = ЦветФонаШапки;
					ОблЯчейки.Примечание.Текст = Строка(Колонки[СчКол - 1].ТипЗначения);
					ОблЯчейки.Обвести(Линия, Линия, Линия, Линия);
					ОблЯчейки.ЦветРамки = ЦветРамки;
					ОблЯчейки.Расшифровка = Новый Структура("РольЯчейки,ИмяПакета,ТипЗначения", "ШапкаТаблицы", СтрокаПакета.ИмяПакета, Колонки[СчКол - 1].ТипЗначения);
				КонецЦикла;
				ОбщийТабДок.Вывести(ОбластьСтрока);

				СтрокаНачала = ОбщийТабДок.ВысотаТаблицы; // для группировки
				// Вывод строки.
				Пока Выборка.Следующий() Цикл
					ОбластьСтрока.Очистить();
					ОбластьСтрока.Область(1, 1).АвтоОтступ = Выборка.Уровень();
					Для СчКол = 1 По КоличествоКолонок Цикл

						ОписаниеТипаЗначения = РезультатЗапроса.Колонки[СчКол-1].ТипЗначения;

						ОблЯчейки = ОбластьСтрока.Область(1, СчКол);
						Оформление = ПараметрыДляОтображенияЯчейки(Выборка[СчКол-1], ппХранилище, ОписаниеТипаЗначения);
						ШириныКолонок[Колонки[СчКол - 1].Имя] = Макс(ШириныКолонок[Колонки[СчКол - 1].Имя], Оформление.Ширина);
						Если Оформление.СодержитЗначение Тогда
							ОблЯчейки.СодержитЗначение = Истина;
							ОблЯчейки.ТипЗначения = ОписаниеТипаЗначения;
							ОблЯчейки.Значение = Выборка[СчКол-1];
						Иначе
							ОблЯчейки.Текст = Оформление.Текст;
						КонецЕсли;

						ОблЯчейки.ЦветТекста = Оформление.ЦветТекста;
						ОблЯчейки.Расшифровка = Новый Структура("РольЯчейки,ИмяПакета,ТипЗначения,Значение", "ЯчейкаСтрокиТаблицы", СтрокаПакета.ИмяПакета + "_" + СтрокаПакета.ИД, ОписаниеТипаЗначения, Оформление.Значение);
						ОблЯчейки.Формат = Оформление.Формат;
						ОблЯчейки.Обвести(Линия, Линия, Линия, Линия);
						ОблЯчейки.ЦветРамки = ЦветРамки;
					КонецЦикла;
					ОбщийТабДок.Вывести(ОбластьСтрока, Выборка.Уровень());
				КонецЦикла;

				ОбластьТаблицы = ОбщийТабДок.Область(СтрокаНачала, , ОбщийТабДок.ВысотаТаблицы);
				ОбластьТаблицы.СоздатьФорматСтрок();
				ОбщийТабДок.Область(СтрокаНачала + 1, , ОбщийТабДок.ВысотаТаблицы, ).Сгруппировать();
				ОбластьТаблицы.РежимИзмененияРазмераКолонки = РежимИзмененияРазмера.БыстроеИзменение;

				ШиринаКолонки = 0;

				Для СчКол = 1 По КоличествоКолонок Цикл
					ТипыЗначений = Колонки[СчКол - 1].ТипЗначения.Типы();
					ЭлементNull = ТипыЗначений.Найти(ТипNULL);
					Если НЕ ЭлементNull = Неопределено Тогда
						ТипыЗначений.Удалить(ЭлементNull);
					КонецЕсли;

					ШиринаКолонки = Макс(4, ШириныКолонок[Колонки[СчКол - 1].Имя]);

					ШиринаКолонки = ШиринаКолонки * КоэффициентШириныКолонок(ШиринаКолонки);

					ОблКол = ОбщийТабДок.Область(СтрокаНачала, СчКол, ОбщийТабДок.ВысотаТаблицы, СчКол);
					ОблКол.ШиринаКолонки = ШиринаКолонки;
				КонецЦикла;

				ОбщийТабДок.ЗакончитьАвтогруппировкуСтрок();
			КонецЕсли;

		КонецЦикла;

	Иначе

		Если МассивСообщений.Количество() Тогда
			Для Каждого Сообщение Из МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	ппХранилище.Результат = ОбщийТабДок;

	Если ппСтруктураДанных = Неопределено Тогда
		ПоместитьВоВременноеХранилище(ппХранилище, ппПутьКХранилищу);
	КонецЕсли;

	ппЗапрос.МенеджерВременныхТаблиц = Неопределено;

КонецПроцедуры

Функция СоздатьТаблицуВТ(Знач ТекстДляРазбора) Экспорт

	ОчиститьТекстЗапросаОтКомментариев(ТекстДляРазбора);
	ОчиститьТекстЗапроса(ТекстДляРазбора);

	ВТ = Новый ТаблицаЗначений;
	ВТ.Колонки.Добавить("ИмяПакета", ОТСтрока);
	ВТ.Колонки.Добавить("ЭтоВТ", ОТБулево);
	ВТ.Колонки.Добавить("ТекстПакета", ОТСтрока);

	Сч = 0;

	Пока СтрДлина(ТекстДляРазбора) > 0 Цикл

		НачалоВЫБРАТЬ = СтрНайти(ВРег(ТекстДляРазбора), "ВЫБРАТЬ");
		Если НачалоВЫБРАТЬ = 0 Тогда
			НачалоВЫБРАТЬ = СтрНайти(ВРег(ТекстДляРазбора), "SELECT");
		КонецЕсли;

		НачалоУНИЧТОЖИТЬ = СтрНайти(ВРег(ТекстДляРазбора), "УНИЧТОЖИТЬ");
		Если НачалоУНИЧТОЖИТЬ = 0 Тогда
			НачалоУНИЧТОЖИТЬ = СтрНайти(ВРег(ТекстДляРазбора), "DROP");
		КонецЕсли;

		Начало = Мин(НачалоВЫБРАТЬ, НачалоУНИЧТОЖИТЬ);

		Если Начало = 0 Тогда
			Начало = Макс(НачалоВЫБРАТЬ, НачалоУНИЧТОЖИТЬ);
		КонецЕсли;

		Если Начало = 0 Тогда
			Прервать;
		КонецЕсли;

		КонецПакета = СтрНайти(ТекстДляРазбора, ";");
		КонецПакета = ?(КонецПакета = 0, СтрДлина(ТекстДляРазбора) + 1, КонецПакета);

		ТекстПакета = СокрЛП(Сред(ТекстДляРазбора, Начало, КонецПакета - Начало));
		ТекстДляРазбора = СокрЛП(Сред(ТекстДляРазбора, КонецПакета + 1));

		ПрисутствиеВТ = СтрНайти(ВРег(ТекстПакета), "ПОМЕСТИТЬ");
		Если ПрисутствиеВТ > 0 Тогда
			Оператор_Поместить_INTO = "ПОМЕСТИТЬ";
		КонецЕсли;

		Если ПрисутствиеВТ = 0 Тогда
			ПрисутствиеВТ = СтрНайти(ВРег(ТекстПакета), "INTO");
			Если ПрисутствиеВТ > 0 Тогда
				Оператор_Поместить_INTO = "INTO";
			КонецЕсли;
		КонецЕсли;

		ИмяВТ = "";

		Если ПрисутствиеВТ <> 0 Тогда // "ПОМЕСТИТЬ" найдено.
			СлСимвол = ПрисутствиеВТ + СтрДлина(Оператор_Поместить_INTO);
			НеНайдено = Истина;
			Пока НеНайдено Цикл // ++ извлечение имени ВТ.
				ТекущийСимвол = Сред(ТекстПакета, СлСимвол, 1);
				ТекущийСимвол = СтрЗаменить(ТекущийСимвол, " ", "");
				ТекущийСимвол = СтрЗаменить(ТекущийСимвол, "|", "");
				ТекущийСимвол = СтрЗаменить(ТекущийСимвол, Символы.ПС, "");
				ИмяВТ = ИмяВТ + ТекущийСимвол;
				НеНайдено = ?(ИмяВТ <> "" И ТекущийСимвол = "", Ложь, Истина);
				СлСимвол = СлСимвол + 1;
			КонецЦикла; // -- извлечение имени ВТ.
			ИмяПакета = СокрЛП(ИмяВТ);
		Иначе
			Сч = Сч + 1;
			ИмяПакета = "Результат" + Формат(Сч, "ЧГ=0");
		КонецЕсли;

		НоваяСтрока = ВТ.Добавить();
		НоваяСтрока.ИмяПакета = ИмяПакета;
		НоваяСтрока.ЭтоВТ = ПрисутствиеВТ <> 0;
		НоваяСтрока.ТекстПакета = ТекстПакета;

	КонецЦикла;

	Возврат ВТ;

КонецФункции

Функция ЗагрузитьДанныеВТзПараметры() Экспорт    
	
	Добавлено = Новый Массив;
	Для Каждого пХранилище Из ПараметрыСеанса.Конс_СписокЗапросов.Получить() Цикл

		пТабПараметров = пХранилище.ТабПараметров;
		ТекстДляРазбора = пХранилище.ТекстДляРазбора;

		ИДСтроки = пХранилище.ИД;

		ПолучитьПараметрыЗапроса(ТекстДляРазбора, ИДСтроки);
		т = ПолучитьИзВременногоХранилища(ПутьКХранилищу);
		Для Каждого ПараметрЗапроса Из т.ТабПараметров.НайтиСтроки(Новый Структура("ИД", ИДСтроки)) Цикл
			СтрокаПараметра = Неопределено;
			Если пТабПараметров.Свойство(ПараметрЗапроса.Название, СтрокаПараметра) Тогда
				Если ТипЗнч(СтрокаПараметра) = Тип("Массив") Тогда
					ПараметрЗапроса.Значение = Новый СписокЗначений;
					ПараметрЗапроса.Значение.ЗагрузитьЗначения(СтрокаПараметра);
				Иначе
					ПараметрЗапроса.Значение = СтрокаПараметра;
				КонецЕсли;
				ПараметрЗапроса.Используется	=	Истина;
			КонецЕсли;
		КонецЦикла; 
		Добавлено.Добавить(Новый Структура("ИДСтроки, текст, Наименование", ИДСтроки, ТекстДляРазбора, пХранилище.ИД));
		ПоместитьВоВременноеХранилище(т, ПутьКХранилищу)
	КонецЦикла;      
	
	Возврат Добавлено
	
КонецФункции 

Процедура ПолучитьПараметрыЗапроса(Знач ТекстДляРазбора, ИД, СтруктураДанных = Неопределено) Экспорт

	ОчиститьТекстЗапросаОтКомментариев(ТекстДляРазбора);
	ОчиститьТекстЗапроса(ТекстДляРазбора);
	ТекстЗапроса = СокрЛП(ТекстДляРазбора);

	Если СтруктураДанных = Неопределено Тогда
		пХранилище = ПолучитьИзВременногоХранилища(ЭтотОбъект.ПутьКХранилищу);
	Иначе
		пХранилище = СтруктураДанных;
	КонецЕсли;

	// SG, вставка 05/06/15 >>>
	// пХранилище может быть неопределено
	Если	Не ЭтоАдресВременногоХранилища(пХранилище)
		И	Не ТипЗнч(пХранилище) = ТипСтруктура Тогда
		Возврат;
	КонецЕсли;
	// SG, вставка 05/06/15 <<<

	пТабПараметров = пХранилище.ТабПараметров;
	ОтборИД = Новый Структура("ИД", ИД);
	пТабПараметровИД = пТабПараметров.НайтиСтроки(ОтборИД);

	Для Каждого Строка Из пТабПараметровИД Цикл
		Строка.Используется = Ложь;
	КонецЦикла;

	// перезаполнение параметров запроса
	Если НЕ Пустаястрока(ТекстЗапроса) Тогда

		Попытка
			Запрос = Новый Запрос(ТекстЗапроса);
			ПараметрыЗапроса = Запрос.НайтиПараметры();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
        
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл

			ИмяПараметра = ПараметрЗапроса.Имя;
			Значение = Неопределено;

			Отбор = Новый Структура("Название, ИД", ИмяПараметра, ИД);
			СтрокаПараметра = пТабПараметров.НайтиСтроки(Отбор);
			Если СтрокаПараметра.Количество() = 0 Тогда
				СтрокаПараметра = пТабПараметров.Добавить();
				СтрокаПараметра.Название = ИмяПараметра;
				СтрокаПараметра.ИД		= ИД;
				СтрокаПараметра.Значение = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(Значение);

				ОписаниеОграничения = Новый Структура("ОписаниеТипа, СписокЗначений, Текст", ПараметрЗапроса.ТипЗначения, Ложь, "");
				СтрокаПараметра.ОграничениеТипов = ОписаниеОграничения;
			Иначе
				СтрокаПараметра = СтрокаПараметра[0];
				Если ТипЗнч(СтрокаПараметра.Значение) = ТипСписокЗначений Тогда
					ПривестиЗначениеКТипу(СтрокаПараметра.Значение, Новый Структура("СписокЗначений,ОписаниеТипа", Истина, ПараметрЗапроса.ТипЗначения), СтрокаПараметра.Значение);

				ИначеЕсли ПараметрЗапроса.ТипЗначения = ОТДата И ТипЗнч(СтрокаПараметра.Значение) = ТипГраница Тогда

					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли ПараметрЗапроса.ТипЗначения = ОТДата И ТипЗнч(СтрокаПараметра.Значение) = ТипМоментВремени Тогда

					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = "Граница" Тогда
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = "ТаблицаЗначений" Тогда

					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = ОТНеопределено Тогда

					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = ОТNULL Тогда

					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = ОТУникальныйИдентификатор Тогда
					СтрокаПараметра.Используется = Истина;
					Продолжить;
				ИначеЕсли СтрокаПараметра.ОграничениеТипов.ОписаниеТипа = ОТМоментВремени Тогда

					СтрокаПараметра.Используется = Истина;
					Продолжить;

				КонецЕсли;
			КонецЕсли;

			Если ТипЗнч(СтрокаПараметра.Значение) = ТипСписокЗначений Тогда
				ОписаниеОграничения = Новый Структура("ОписаниеТипа, СписокЗначений", ПараметрЗапроса.ТипЗначения, Истина);

			КонецЕсли;

			СтрокаПараметра.Используется = Истина;

		КонецЦикла;

		пХранилище.Вставить("ТабПараметров", пТабПараметров);

	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// перезаполнение таблицы ВТ
	РазобранныйЗапрос = СоздатьТаблицуВТ(ТекстЗапроса);
	ТаблицаПакетов = пХранилище.ТаблицаПакетов;

	ОтборИД = Новый Структура("ИД", ИД);
	пТаблицаПакетов = ТаблицаПакетов.НайтиСтроки(ОтборИД);
	ИсходныеСтроки = ТаблицаПакетов.Скопировать(пТаблицаПакетов);

	Для Каждого Строка Из пТаблицаПакетов Цикл
		ТаблицаПакетов.Удалить(Строка);
	КонецЦикла;

	Для Каждого Строка Из РазобранныйЗапрос Цикл

		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.ИмяПакета	= Строка.ИмяПакета;
		НовСтрока.ИД			= ИД;
		НовСтрока.ЭтоВТ		= Строка.ЭтоВТ;
		НовСтрока.ТекстПакета = Строка.ТекстПакета;
		НовСтрока.Показать	= НЕ Строка.ЭтоВТ;

		ОтборПоСтроке = Новый Структура("ИД,ИмяПакета", ИД, Строка.ИмяПакета);
		НайденнаяСтрока = ИсходныеСтроки.НайтиСтроки(ОтборПоСтроке);

		Если НЕ НайденнаяСтрока.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НовСтрока, НайденнаяСтрока[0], "Адрес,Выгрузить,Показать,ТекстМодуля");
		КонецЕсли;

	КонецЦикла;

	ИсходныеСтроки = Неопределено;

	пХранилище.Вставить("ТаблицаПакетов", ТаблицаПакетов);

	Если СтруктураДанных = Неопределено Тогда
		ЭтотОбъект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, пХранилище.УникальныйИдентификаторФормы);
	КонецЕсли;

КонецПроцедуры

Функция ПараметрыДляОтображенияЯчейки(Значение, Хранилище, ОписаниеТипаЗначения) Экспорт

	Ячейка = Новый Структура("Значение,Текст,ЦветТекста,Ширина,Формат,СодержитЗначение", Значение, Значение, WebЦвета.Черный, 0, "", Истина);

	ТипТекущегоЗначения = ТипЗнч(Ячейка.Значение);

	Если ТипТекущегоЗначения = ТипБулево Тогда
		Ячейка.ЦветТекста = ?(Ячейка.Значение,WebЦвета.ТемноЗолотистый,WebЦвета.ТемноГрифельноСерый);
		Ячейка.Ширина = 4;
	ИначеЕсли Ячейка.Значение = 0 Тогда
		РазрядностьДробнойЧасти = ОписаниеТипаЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		ДробнаяЧасть = "";
		Для Счс = 1 По РазрядностьДробнойЧасти Цикл
			ДробнаяЧасть = ДробнаяЧасть + "0";
		КонецЦикла;
		Ячейка.Формат = "ЧН='0" + ?(ДробнаяЧасть = "", "", "," + ДробнаяЧасть) + "'";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли Ячейка.Значение = NULL Тогда
		Ячейка.СодержитЗначение = Ложь;
		Ячейка.Текст = "<NULL>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = 6;
	ИначеЕсли Ячейка.Значение = Неопределено Тогда
		Ячейка.СодержитЗначение = Ложь;
		Ячейка.Текст = "<Неопределено>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = 14;
	ИначеЕсли Ячейка.Значение = "" Тогда
		Ячейка.СодержитЗначение = Ложь;
		Ячейка.Текст = "<Пустая строка>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = 15;
	ИначеЕсли ТипТекущегоЗначения = ТипМоментВремени Тогда
		Ячейка.СодержитЗначение = Ложь;
		Ячейка.Текст = Строка(Ячейка.Значение);
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	ИначеЕсли ТипТекущегоЗначения = ТипРезультатЗапроса Тогда
		Ячейка.СодержитЗначение = Ложь;
		НомерРезультатаЗапроса = Формат(Хранилище.СтруктураРезультатовЗапросов.Количество() + 1, "ЧГ=0");
		Ключ = "РезультатЗапроса_" + НомерРезультатаЗапроса;
		Ячейка.Текст = "<РезультатЗапроса>";
		Ячейка.Значение = Ключ;
		Хранилище.СтруктураРезультатовЗапросов.Вставить(Ключ, Значение);
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = 18;
	ИначеЕсли ТипВсеСсылки_Справочники.СодержитТип(ТипТекущегоЗначения)
		ИЛИ ТипВсеСсылки_Документы.СодержитТип(ТипТекущегоЗначения)
		ИЛИ ТипВсеСсылки_ПланыСчетов.СодержитТип(ТипТекущегоЗначения)
		ИЛИ ТипВсеСсылки_ПланыВидовХарактеристик.СодержитТип(ТипТекущегоЗначения)
		ИЛИ ТипВсеСсылки_ПланыВидовРасчета.СодержитТип(ТипТекущегоЗначения)
		ИЛИ ТипВсеСсылки_Перечисления.СодержитТип(ТипТекущегоЗначения)
		ИЛИ ТипВсеСсылки_ПланыОбмена.СодержитТип(ТипТекущегоЗначения)
		Тогда
		Если Ячейка.Значение.Пустая() Тогда
			Если ТипВсеСсылки_Справочники.СодержитТип(ТипТекущегоЗначения) Тогда
				пТип = "Справочник.";
			ИначеЕсли ТипВсеСсылки_Документы.СодержитТип(ТипТекущегоЗначения) Тогда
				пТип = "Документ.";
			ИначеЕсли ТипВсеСсылки_ПланыСчетов.СодержитТип(ТипТекущегоЗначения) Тогда
				пТип = "ПланСчетов.";
			ИначеЕсли ТипВсеСсылки_ПланыВидовХарактеристик.СодержитТип(ТипТекущегоЗначения) Тогда
				пТип = "ПланВидовХарактеристик.";
			ИначеЕсли ТипВсеСсылки_ПланыВидовРасчета.СодержитТип(ТипТекущегоЗначения) Тогда
				пТип = "ПланВидовРасчета";
			ИначеЕсли ТипВсеСсылки_Перечисления.СодержитТип(ТипТекущегоЗначения) Тогда
				пТип = "Перечисление.";
			ИначеЕсли ТипВсеСсылки_ПланыОбмена.СодержитТип(ТипТекущегоЗначения) Тогда
				пТип = "ПланОбмена.";
			КонецЕсли;
			Ячейка.СодержитЗначение = Ложь;
			Ячейка.Текст = "<Пустая ссылка: " + пТип + ТипТекущегоЗначения + ">";
			Ячейка.ЦветТекста = WebЦвета.Серый;
			Ячейка.Ширина = СтрДлина(Ячейка.Текст);
		ИначеЕсли ТипВсеСсылки_Перечисления.СодержитТип(ТипТекущегоЗначения) Тогда
			Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			Ячейка.Ширина = СтрДлина(Ячейка.Текст);
			// определим по типу
		ИначеЕсли ТипВсеСсылки_Документы.СодержитТип(ТипТекущегоЗначения) Тогда
			Ячейка.ЦветТекста = WebЦвета.КожаноКоричневый;
			Ячейка.Ширина = Цел(СтрДлина(Ячейка.Текст));
			// определим по типу
		ИначеЕсли ТипВсеСсылки_Справочники.СодержитТип(ТипТекущегоЗначения) Тогда
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			КонецЕсли;
			Ячейка.Ширина = СтрДлина(Ячейка.Значение.Наименование);
		ИначеЕсли ТипВсеСсылки_ПланыВидовХарактеристик.СодержитТип(ТипТекущегоЗначения) Тогда
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			Иначе
				Ячейка.ЦветТекста = WebЦвета.Томатный;
			КонецЕсли;
			Ячейка.Ширина = СтрДлина(Ячейка.Значение.Наименование);
		ИначеЕсли ТипВсеСсылки_ПланыВидовРасчета.СодержитТип(ТипТекущегоЗначения) Тогда
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			Иначе
				Ячейка.ЦветТекста = WebЦвета.Томатный;
			КонецЕсли;
			Ячейка.Ширина = СтрДлина(Ячейка.Значение.Наименование);
		ИначеЕсли ТипВсеСсылки_ПланыСчетов.СодержитТип(ТипТекущегоЗначения) Тогда
			Если Ячейка.Значение.Предопределенный Тогда
				Ячейка.ЦветТекста = WebЦвета.ТемноБордовый;
			Иначе
				Ячейка.ЦветТекста = WebЦвета.Томатный;
			КонецЕсли;
			Ячейка.Ширина = СтрДлина(Строка(Ячейка.Значение));
		ИначеЕсли ТипВсеСсылки_ПланыОбмена.СодержитТип(ТипТекущегоЗначения) Тогда
			Ячейка.ЦветТекста = WebЦвета.Томатный;
			Ячейка.Ширина = СтрДлина(Строка(Ячейка.Значение));
		КонецЕсли;
	ИначеЕсли ТипТекущегоЗначения = ТипСтрока Тогда
		Ячейка.ЦветТекста = WebЦвета.ТемноЗеленый;
		Ячейка.Ширина = СтрДлина(Ячейка.Значение);
	ИначеЕсли Ячейка.Значение = Дата(1,1,1) Тогда
		Ячейка.СодержитЗначение = Ложь;
		Ячейка.Текст = "<Пустая дата>";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = 13;
	ИначеЕсли ТипТекущегоЗначения = ТипДата Тогда
		Ячейка.ЦветТекста = WebЦвета.ТемноСиний;
		Ячейка.Ширина = ?(ОписаниеТипаЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, 10, 19);
	ИначеЕсли ТипТекущегоЗначения = ТипЧисло Тогда
		Ячейка.ЦветТекста = ?(Ячейка.Значение < 0, WebЦвета.Красный, WebЦвета.ФуксинТемный);

		Если ОписаниеТипаЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 И ОписаниеТипаЗначения.КвалификаторыЧисла.Разрядность = 0 Тогда
			РазрядностьДробнойЧасти = СтрДлина(Сред(Строка(Ячейка.Значение%1), 3));
		Иначе
			РазрядностьДробнойЧасти = ОписаниеТипаЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		КонецЕсли;

		Ячейка.Ширина = Макс(СтрДлина(Цел(Ячейка.Текст)) + ?(РазрядностьДробнойЧасти > 0, 1 + РазрядностьДробнойЧасти, 0), СтрДлина(Ячейка.Текст));

		ДробнаяЧасть = "";
		Для Счс = 1 По РазрядностьДробнойЧасти Цикл
			ДробнаяЧасть = ДробнаяЧасть + "0";
		КонецЦикла;
		Ячейка.Формат = "ЧДЦ='" + Формат(РазрядностьДробнойЧасти, "ЧГ=0") + "'; ЧН='0" + ?(ДробнаяЧасть = "", "", "," + ДробнаяЧасть) + "'";
	ИначеЕсли ТипТекущегоЗначения = ТипТип Тогда
		Если ТипВсеСсылки_Справочники.СодержитТип(Ячейка.Значение) Тогда
			пТип = "СправочникСсылка.";
		ИначеЕсли ТипВсеСсылки_Документы.СодержитТип(Ячейка.Значение) Тогда
			пТип = "ДокументСсылка.";
		ИначеЕсли ТипВсеСсылки_ПланыСчетов.СодержитТип(Ячейка.Значение) Тогда
			пТип = "ПланСчетовСсылка.";
		ИначеЕсли ТипВсеСсылки_ПланыВидовХарактеристик.СодержитТип(Ячейка.Значение) Тогда
			пТип = "ПланВидовХарактеристикСсылка.";
		ИначеЕсли ТипВсеСсылки_ПланыВидовРасчета.СодержитТип(Ячейка.Значение) Тогда
			пТип = "ПланВидовРасчетаСсылка";
		ИначеЕсли ТипВсеСсылки_Перечисления.СодержитТип(Ячейка.Значение) Тогда
			пТип = "ПеречислениеСсылка.";
		ИначеЕсли ТипВсеСсылки_ПланыОбмена.СодержитТип(Ячейка.Значение) Тогда
			пТип = "ПланОбменаСсылка.";
		КонецЕсли;
		Ячейка.СодержитЗначение = Ложь;
		Ячейка.Текст = "<Тип: " + пТип + Метаданные.НайтиПоТипу(Ячейка.Значение).Имя + ">";
		Ячейка.ЦветТекста = WebЦвета.Серый;
		Ячейка.Ширина = СтрДлина(Ячейка.Текст);
	КонецЕсли;

	Возврат Ячейка;

КонецФункции

Процедура ПривестиЗначениеКТипу(ИсходноеЗначение, ОписаниеВыбранныхТипов, НовоеЗначение)

	ИсходныйТипСписокЗначений = ТипЗнч(ИсходноеЗначение) = ТипСписокЗначений;

	ПривестиКСпискуЗначений = ОписаниеВыбранныхТипов.СписокЗначений;
	НовыйТип = ОписаниеВыбранныхТипов.ОписаниеТипа;

	ЭлементыИсходногоЗначения = Новый Массив;
	Если ИсходныйТипСписокЗначений Тогда
		Для Каждого Эл Из ИсходноеЗначение Цикл
			ЭлементыИсходногоЗначения.Добавить(Эл.Значение);
		КонецЦикла;
	Иначе
		ЭлементыИсходногоЗначения.Добавить(ИсходноеЗначение);
	КонецЕсли;

	Если ПривестиКСпискуЗначений Тогда
		НовоеЗначение = Новый СписокЗначений;
		НовоеЗначение.ТипЗначения = НовыйТип;
		Для Каждого ЭлИсхЗнач Из ЭлементыИсходногоЗначения Цикл
			Если НовыйТип.СодержитТип(ТипЗнч(ЭлИсхЗнач)) Тогда
				НовоеЗначение.Добавить(ЭлИсхЗнач);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ЭлИсхЗнач Из ЭлементыИсходногоЗначения Цикл
			Если НовыйТип.СодержитТип(ТипЗнч(ЭлИсхЗнач)) Тогда
				НовоеЗначение = ЭлИсхЗнач;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПривестиЗначениеКТипу()

Процедура ОчиститьТекстЗапросаОтКомментариев(ИсходныйТекст) Экспорт

	Если ПустаяСтрока(ИсходныйТекст) Тогда
		ИсходныйТекст = "";
		Возврат;
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент2 = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();

	Для i = 1 По КоличествоСтрок Цикл
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(i);
		НоваяСтрока = "";
		ЭтоТекст = Ложь;
		СимволовВСтроке = СтрДлина(ТекущаяСтрока);
		Для r = 1 По СимволовВСтроке Цикл
			ТекСимвол = Сред(ТекущаяСтрока, r, 1);
			Если ТекСимвол = """" Тогда
				ЭтоТекст = НЕ ЭтоТекст;
			КонецЕсли;
			Если НЕ ЭтоТекст И ТекСимвол = "/" И ?(r < СимволовВСтроке, Истина, Ложь) И Сред(ТекущаяСтрока, r + 1, 1) = "/" Тогда
				Прервать;
			КонецЕсли;
			НоваяСтрока = НоваяСтрока + ТекСимвол;
		КонецЦикла;
		ТекстовыйДокумент2.ДобавитьСтроку(НоваяСтрока);
	КонецЦикла;

	ИсходныйТекст = ТекстовыйДокумент2.ПолучитьТекст();

КонецПроцедуры

Функция ОчиститьТекстЗапроса(ТекстЗапроса) Экспорт
	Перем Ответ, флЭтоКомментарий, флЭтоСтрока, БукваСледующая, сч, дл, Буква;
	Ответ = "";
	флЭтоКомментарий = Ложь;
	флЭтоСтрока =Ложь;
	флЭтоДляПостроителя = Ложь;
	БукваСледующая = Лев(ТекстЗапроса, 1);
	сч = 1;
	дл = СтрДлина(ТекстЗапроса);
	Пока сч<=дл Цикл
		сч = сч + 1;
		Буква = БукваСледующая;
		БукваСледующая = Сред(ТекстЗапроса, сч, 1);
		Если Буква="""" И БукваСледующая="""" И флЭтоСтрока И (НЕ флЭтоКомментарий) Тогда
			сч = сч + 1;
			Буква = БукваСледующая;
			БукваСледующая = Сред(ТекстЗапроса, сч, 1);
			Продолжить;
		ИначеЕсли Буква="""" И (БукваСледующая<>"""" ИЛИ (НЕ флЭтоСтрока)) И (НЕ флЭтоКомментарий) Тогда
			флЭтоСтрока = НЕ флЭтоСтрока;
			Ответ = Ответ + """";
			Продолжить;
		ИначеЕсли Буква="/" И БукваСледующая="/" И (НЕ флЭтоСтрока) Тогда
			флЭтоКомментарий = Истина;
			Продолжить;
		ИначеЕсли Буква=Символы.ПС И флЭтоКомментарий Тогда
			флЭтоКомментарий = Ложь;
		ИначеЕсли Буква="{" И (НЕ флЭтоСтрока) И (НЕ флЭтоКомментарий) Тогда
			флЭтоДляПостроителя = Истина;
		ИначеЕсли Буква="}" И (НЕ флЭтоСтрока) И (НЕ флЭтоКомментарий) Тогда
			флЭтоДляПостроителя = Ложь;
		КонецЕсли;
		Если НЕ (флЭтоСтрока ИЛИ флЭтоКомментарий ИЛИ флЭтоДляПостроителя) Тогда
			Ответ = Ответ + Буква;
		КонецЕсли;
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция СоздатьСтруктуру(ДобавитьДерево = Ложь) Экспорт

	СтруктураХранилища = Новый Структура;

	ТабПараметров = Новый ТаблицаЗначений;
	Колонки = ТабПараметров.Колонки;
	Колонки.Добавить("ИД"					, ОТСтрока);
	Колонки.Добавить("Название"			, ОТСтрока);
	Колонки.Добавить("Значение");
	Колонки.Добавить("ОграничениеТипов");
	Колонки.Добавить("Используется"		, ОТБулево);
	// ++ 08.09.2015 Доработка от tristarr1
	Колонки.Добавить("Вычисляемый"	, ОТБулево);
	// -- 08.09.2015 Доработка от tristarr1
	Колонки.Добавить("Свойство"			, ОТСтрока);

	ТаблицаПакетов = Новый ТаблицаЗначений;
	Колонки = ТаблицаПакетов.Колонки;
	Колонки.Добавить("ИмяПакета"		, ОТСтрока);
	Колонки.Добавить("ИД"				, ОТСтрока);
	Колонки.Добавить("Адрес"			, ОТСтрока);
	Колонки.Добавить("Выгрузить"		, ОТБулево);
	Колонки.Добавить("Показать"		, ОТБулево);
	Колонки.Добавить("ЭтоВТ"			, ОТБулево);
	Колонки.Добавить("ТекстПакета"	, ОТСтрока);
	Колонки.Добавить("ВремяВыполнения", ОТЧисло);
	Колонки.Добавить("ТекстМодуля"	, ОТСтрока);
	Колонки.Добавить("КоличествоСтрок", ОТЧисло);

	Если ДобавитьДерево Тогда

		ДеревоЗапросов = Новый ДеревоЗначений;
		Колонки = ДеревоЗапросов.Колонки;
		Колонки.Добавить("Наименование"				, ОТСтрока);
		Колонки.Добавить("ИД"							, ОТСтрока);
		Колонки.Добавить("Текст"						, ОТСтрока);
		Колонки.Добавить("АвтоДобавлениеПредставлений" , ОТБулево);
		Колонки.Добавить("ИДКартинки"					, ОТЧисло);
		Колонки.Добавить("ВыполнитьВГруппе"			, ОТЧисло);

		НоваяСтрокаДЗ = ДеревоЗапросов.Строки.Добавить();
		ИДСтроки = "00000000000000";

		НоваяСтрокаДЗ.ИД = ИДСтроки;
		НоваяСтрокаДЗ.Наименование = "Ветка запросов";

		СтруктураХранилища.Вставить("ДеревоЗапросов", ДеревоЗапросов);

	КонецЕсли;

	СтруктураХранилища.Вставить("ТабПараметров"				, ТабПараметров);
	СтруктураХранилища.Вставить("ТаблицаПакетов"				, ТаблицаПакетов);
	СтруктураХранилища.Вставить("ОписаниеТекущейВеткиДЗ"		, Новый Структура);
	СтруктураХранилища.Вставить("Результат"					, Новый ТаблицаЗначений);
	СтруктураХранилища.Вставить("СтруктураТЗ"					, Новый Структура);
	СтруктураХранилища.Вставить("СтруктураРезультатовЗапросов", Новый Структура);
	СтруктураХранилища.Вставить("СтруктурыРезультатовЗапросовТабДоков", Новый Структура);

	Возврат СтруктураХранилища;

КонецФункции

Функция ОбработатьВнешнийЗапрос(Знач Запрос, ПутьКФайлуРезультата) Экспорт

	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;

	ФайлРезультата = Новый Файл(ПутьКФайлуРезультата);

	Если ФайлРезультата.Существует() Тогда
		СтруктураДанных = ЗначениеИзФайла(ПутьКФайлуРезультата);
	Иначе
		СтруктураДанных = СоздатьСтруктуру(Истина);
		СтруктураДанных.Вставить("ВнешнийРезультат", Новый ТабличныйДокумент);
	КонецЕсли;

	ВеткаЗапроса = СтруктураДанных.ДеревоЗапросов.Строки[0].Строки.Добавить();
	НомерСтрокиСтрокой = Формат(СтруктураДанных.ДеревоЗапросов.Строки[0].Строки.Количество(), "ЧГ=0");
	ИД = Лев("00000000000000", 14 - СтрДлина(НомерСтрокиСтрокой)) + НомерСтрокиСтрокой;
	ВеткаЗапроса.ИД = ИД;
	ВеткаЗапроса.Наименование = "Вызов №" + НомерСтрокиСтрокой;
	ВеткаЗапроса.Текст = Запрос.Текст;
	ВеткаЗапроса.ВыполнитьВГруппе = Истина;
	пТабПараметров = СтруктураДанных.ТабПараметров;

	Для Каждого ПараметрЗапроса Из Запрос.Параметры Цикл

		ИмяПараметра = ПараметрЗапроса.Ключ;
		Значение = ПараметрЗапроса.Значение;

		СтрокаПараметра = пТабПараметров.Добавить();
		СтрокаПараметра.Название = ИмяПараметра;
		СтрокаПараметра.ИД		= ИД;

		Если ТипЗнч(Значение) = ТипСписокЗначений Тогда
			СтрокаПараметра.ОграничениеТипов = Новый Структура("ОписаниеТипа,СписокЗначений", Значение.ТипЗначения, Истина);
		ИначеЕсли ТипЗнч(Значение) = ТипМассив Тогда
			СпЗнч = Новый СписокЗначений;
			МассивТипов = Новый Массив;
			Для Каждого Эл Из Значение Цикл
					МассивТипов.Добавить(ТипЗнч(Эл));
			КонецЦикла;
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			СпЗнч.ЗагрузитьЗначения(Значение);
			Значение = СпЗнч;
			СтрокаПараметра.ОграничениеТипов = Новый Структура("ОписаниеТипа,СписокЗначений", ОписаниеТипов, Истина);
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Значение));

			СтрокаПараметра.ОграничениеТипов = Новый Структура("ОписаниеТипа,СписокЗначений", Новый ОписаниеТипов(МассивТипов), Ложь);
		КонецЕсли;

		СтрокаПараметра.Значение = Значение;
		СтрокаПараметра.Используется = Истина;

	КонецЦикла;

	РазобранныйЗапрос = СоздатьТаблицуВТ(Запрос.Текст);
	ТаблицаПакетов = СтруктураДанных.ТаблицаПакетов;

	Для Каждого Строка Из РазобранныйЗапрос Цикл

		НовСтрока = ТаблицаПакетов.Добавить();
		НовСтрока.ИмяПакета	= Строка.ИмяПакета;
		НовСтрока.ИД			= ИД;
		НовСтрока.ЭтоВТ		= Строка.ЭтоВТ;
		НовСтрока.ТекстПакета = Строка.ТекстПакета;
		НовСтрока.Показать	= НЕ Строка.ЭтоВТ;

	КонецЦикла;

	Возврат ЗначениеВФайл(ПутьКФайлуРезультата, СтруктураДанных);

КонецФункции

Функция ИзменитьЯзыкЗапроса(Знач ИсходныйТекст, СохранитьКомментарии = Истина, РусскийЯзык = Истина) Экспорт

	Если ПустаяСтрока(ИсходныйТекст) Тогда
		Возврат "";
	КонецЕсли;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент2 = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	СимволыРазделители = " " + Символы.ПС + Символы.Таб + "+-*/()={}";

	ТекущийУровеньВложенности = 0;
	ДанныеТекущихУровнейВложенности = Новый ТаблицаЗначений;
	ДанныеТекущихУровнейВложенности.Колонки.Добавить("Секция");
	ДанныеТекущихУровнейВложенности.Колонки.Добавить("Предложение");
	НоваяСтрока = ДанныеТекущихУровнейВложенности.Добавить();
	НоваяСтрока.Секция = "";
	НоваяСтрока.Предложение = "";
	ТекущаяСекция = ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Секция;
	ТекущееПредложение = ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Предложение;
	ОднословныйСловарь = СоздатьОднословныйСловарь();

	Для i = 1 По КоличествоСтрок Цикл
		ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(i);
		НоваяСтрока = "";
		ЭтоТекст = Ложь;
		СимволовВСтроке = СтрДлина(ТекущаяСтрока);
		Для r = 1 По СимволовВСтроке Цикл
			ТекСимвол = Сред(ТекущаяСтрока, r, 1);
			Если ТекСимвол = """" Тогда
				ЭтоТекст = НЕ ЭтоТекст;
			КонецЕсли;
			Если НЕ ЭтоТекст И ТекСимвол = "/" И ?(r < СимволовВСтроке, Истина, Ложь) И Сред(ТекущаяСтрока, r + 1, 1) = "/" Тогда
				Если СохранитьКомментарии Тогда
					НоваяСтрока = НоваяСтрока + Сред(ТекущаяСтрока, r);
				КонецЕсли;
				Прервать;
			ИначеЕсли ЭтоТекст ИЛИ (НЕ ЭтоТекст И ТекСимвол = """") Тогда
				НоваяСтрока = НоваяСтрока + ТекСимвол;
			ИначеЕсли СтрНайти(СимволыРазделители, ТекСимвол) > 0 Тогда
				НоваяСтрока = НоваяСтрока + ТекСимвол;
				Если ТекСимвол = "(" Тогда
					ТекущийУровеньВложенности = ТекущийУровеньВложенности + 1;
					ДанныеТекущихУровнейВложенности.Добавить();
				ИначеЕсли ТекСимвол = ")" Тогда
					ДанныеТекущихУровнейВложенности.Удалить(ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности]);
					ТекущийУровеньВложенности = ТекущийУровеньВложенности - 1;
				КонецЕсли;
			Иначе
				ТекСлово = ТекСимвол;
				Пока r < СимволовВСтроке Цикл
					r = r + 1;
					ТекСимвол = Сред(ТекущаяСтрока, r, 1);
					Если СтрНайти(СимволыРазделители, ТекСимвол) = 0 Тогда
						ТекСлово = ТекСлово + ТекСимвол;
					Иначе
						r = r - 1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОпределитьТекущуюСекциюПредложение(ТекСлово, ТекущаяСекция, ТекущееПредложение) Тогда
					ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Секция = ТекущаяСекция;
					ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Предложение = ТекущееПредложение;
				КонецЕсли;
				Если РусскийЯзык Тогда
					СтруктураПоиска = Новый Структура("Английский", ТекСлово);
					ТребуемыйЯзык = "Русский";
				ИначеЕсли НЕ РусскийЯзык Тогда
					СтруктураПоиска = Новый Структура("Русский", ТекСлово);
					ТребуемыйЯзык = "Английский";
				КонецЕсли;
				НайденныеСтроки = ОднословныйСловарь.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 1 Тогда
					ТекСлово = НайденныеСтроки[0][ТребуемыйЯзык];
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					СтруктураПоиска.Вставить("Секция"		, ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Секция);
					СтруктураПоиска.Вставить("Предложение", ДанныеТекущихУровнейВложенности[ТекущийУровеньВложенности].Предложение);
					НайденнаяСтрока = ОднословныйСловарь.НайтиСтроки(СтруктураПоиска);
					Если НайденнаяСтрока.Количество() = 1 Тогда
						ТекСлово = НайденнаяСтрока[0][ТребуемыйЯзык];
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока = НоваяСтрока + ТекСлово;
			КонецЕсли;
		КонецЦикла;
		ТекстовыйДокумент2.ДобавитьСтроку(НоваяСтрока);
	КонецЦикла;

	Возврат ТекстовыйДокумент2.ПолучитьТекст();

КонецФункции // ИзменитьЯзыкЗапроса()

Функция ОпределитьТекущуюСекциюПредложение(ТекСлово, ТекущаяСекция, ТекущееПредложение) Экспорт

	Если ВРег(ТекСлово) = "ВЫБРАТЬ" ИЛИ ВРег(ТекСлово) = "SELECT" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "ВЫБРАТЬ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "УНИЧТОЖИТЬ" ИЛИ ВРег(ТекСлово) = "DROP" Тогда
		ТекущаяСекция		= "УНИЧТОЖИТЬ";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ОБЪЕДИНИТЬ" ИЛИ ВРег(ТекСлово) = "UNION" Тогда
		ТекущаяСекция		= "ОБЪЕДИНИТЬ";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ПОМЕСТИТЬ" ИЛИ ВРег(ТекСлово) = "INTO" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "ПОМЕСТИТЬ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИЗ" ИЛИ ВРег(ТекСлово) = "FROM" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "ИЗ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИНДЕКСИРОВАТЬ" ИЛИ ВРег(ТекСлово) = "INDEX" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "ИНДЕКСИРОВАТЬ ПО";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ГДЕ" ИЛИ ВРег(ТекСлово) = "WHERE" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "ГДЕ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "СГРУППИРОВАТЬ" ИЛИ ВРег(ТекСлово) = "GROUP" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "СГРУППИРОВАТЬ ПО";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИМЕЮЩИЕ" ИЛИ ВРег(ТекСлово) = "HAVING" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "ИМЕЮЩИЕ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ДЛЯ" ИЛИ ВРег(ТекСлово) = "FOR" Тогда
		ТекущаяСекция		= "ВЫБРАТЬ";
		ТекущееПредложение = "ДЛЯ ИЗМЕНЕНИЯ";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "УПОРЯДОЧИТЬ" ИЛИ ВРег(ТекСлово) = "ORDER" Тогда
		ТекущаяСекция		= "УПОРЯДОЧИТЬ ПО";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "АВТОУПОРЯДОЧИВАНИЕ" ИЛИ ВРег(ТекСлово) = "AUTOORDER" Тогда
		ТекущаяСекция		= "АВТОУПОРЯДОЧИВАНИЕ";
		ТекущееПредложение = "";
		Возврат Истина;
	ИначеЕсли ВРег(ТекСлово) = "ИТОГИ" ИЛИ ВРег(ТекСлово) = "TOTALS" Тогда
		ТекущаяСекция		= "ИТОГИ";
		ТекущееПредложение = "";
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция СоздатьОднословныйСловарь()

	Словарь = Новый ТаблицаЗначений;

	Словарь.Колонки.Добавить("Русский");
	Словарь.Колонки.Добавить("Английский");
	Словарь.Колонки.Добавить("Секция");
	Словарь.Колонки.Добавить("Предложение");

	ДобавитьСтрокуВСловарь(Словарь, "АВТОУПОРЯДОЧИВАНИЕ"	, "AUTOORDER");
	ДобавитьСтрокуВСловарь(Словарь, "БУЛЕВО"				, "BOOLEAN");
	ДобавитьСтрокуВСловарь(Словарь, "В"						, "IN");
	ДобавитьСтрокуВСловарь(Словарь, "ВНЕШНЕЕ"				, "OUTER");
	ДобавитьСтрокуВСловарь(Словарь, "ВНУТРЕННЕЕ"			, "INNER");
	ДобавитьСтрокуВСловарь(Словарь, "ВОЗР"					, "ASC");
	ДобавитьСтрокуВСловарь(Словарь, "ВСЕ"					, "ALL");
	ДобавитьСтрокуВСловарь(Словарь, "ВЫБОР"					, "CASE");
	ДобавитьСтрокуВСловарь(Словарь, "ВЫБРАТЬ"				, "SELECT");
	ДобавитьСтрокуВСловарь(Словарь, "ВЫРАЗИТЬ"				, "CAST");
	ДобавитьСтрокуВСловарь(Словарь, "ГДЕ"					, "WHERE");
	ДобавитьСтрокуВСловарь(Словарь, "ГОД"					, "YEAR");
	ДобавитьСтрокуВСловарь(Словарь, "ДАТА"					, "DATE");
	ДобавитьСтрокуВСловарь(Словарь, "ДАТАВРЕМЯ"				, "DATETIME");
	ДобавитьСтрокуВСловарь(Словарь, "ДЕКАДА"				, "TENDAYS");
	ДобавитьСтрокуВСловарь(Словарь, "ДЕНЬ"					, "DAY");
	ДобавитьСтрокуВСловарь(Словарь, "ДЕНЬГОДА"				, "DAYOFYEAR");
	ДобавитьСтрокуВСловарь(Словарь, "ДЕНЬНЕДЕЛИ"			, "WEEKDAY");
	ДобавитьСтрокуВСловарь(Словарь, "ДОБАВИТЬКДАТЕ"			, "DATEADD");
	ДобавитьСтрокуВСловарь(Словарь, "ЕСТЬ"					, "IS");
	ДобавитьСтрокуВСловарь(Словарь, "ЕСТЬNULL"				, "ISNULL");
	ДобавитьСтрокуВСловарь(Словарь, "ЗНАЧЕНИЕ"				, "VALUE");
	ДобавитьСтрокуВСловарь(Словарь, "И"						, "AND");
	ДобавитьСтрокуВСловарь(Словарь, "ИЕРАРХИИ"				, "HIERARCHY", , "ГДЕ");
	ДобавитьСтрокуВСловарь(Словарь, "ИЕРАРХИЯ"				, "HIERARCHY", , "УПОРЯДОЧИТЬ ПО");
	ДобавитьСтрокуВСловарь(Словарь, "ИЗ"					, "FROM");
	ДобавитьСтрокуВСловарь(Словарь, "ИЛИ"					, "OR");
	ДобавитьСтрокуВСловарь(Словарь, "ИМЕЮЩИЕ"				, "HAVING");
	ДобавитьСтрокуВСловарь(Словарь, "ИНАЧЕ"					, "ELSE");
	ДобавитьСтрокуВСловарь(Словарь, "ИСТИНА"				, "TRUE");
	ДобавитьСтрокуВСловарь(Словарь, "КАК"					, "AS");
	ДобавитьСтрокуВСловарь(Словарь, "КВАРТАЛ"				, "QUARTER");
	ДобавитьСтрокуВСловарь(Словарь, "КОГДА"					, "WHEN");
	ДобавитьСтрокуВСловарь(Словарь, "КОЛИЧЕСТВО"			, "COUNT");
	ДобавитьСтрокуВСловарь(Словарь, "КОНЕЦПЕРИОДА"			, "ENDOFPERIOD");
	ДобавитьСтрокуВСловарь(Словарь, "КОНЕЦ"					, "END");
	ДобавитьСтрокуВСловарь(Словарь, "ЛЕВОЕ"					, "LEFT");
	ДобавитьСтрокуВСловарь(Словарь, "ЛОЖЬ"					, "FALSE");
	ДобавитьСтрокуВСловарь(Словарь, "МАКСИМУМ"				, "MAX");
	ДобавитьСтрокуВСловарь(Словарь, "МЕЖДУ"					, "BETWEEN");
	ДобавитьСтрокуВСловарь(Словарь, "МЕСЯЦ"					, "MONTH");
	ДобавитьСтрокуВСловарь(Словарь, "МИНИМУМ"				, "MIN");
	ДобавитьСтрокуВСловарь(Словарь, "МИНУТА"				, "MINUTE");
	ДобавитьСтрокуВСловарь(Словарь, "НАЧАЛОПЕРИОДА"			, "BEGINOFPERIOD");
	ДобавитьСтрокуВСловарь(Словарь, "НЕ"					, "NOT");
	ДобавитьСтрокуВСловарь(Словарь, "НЕДЕЛЯ"				, "WEEK");
	ДобавитьСтрокуВСловарь(Словарь, "НЕОПРЕДЕЛЕНО"			, "UNDEFINED");
	ДобавитьСтрокуВСловарь(Словарь, "ОБЩИЕ"					, "OVERALL");
	ДобавитьСтрокуВСловарь(Словарь, "ОБЪЕДИНИТЬ"			, "UNION");
	ДобавитьСтрокуВСловарь(Словарь, "ПЕРВЫЕ"				, "TOP");
	ДобавитьСтрокуВСловарь(Словарь, "ПЕРИОДАМИ"				, "PERIODS");
	ДобавитьСтрокуВСловарь(Словарь, "ПОДОБНО"				, "LIKE");
	ДобавитьСтрокуВСловарь(Словарь, "ПОДСТРОКА"				, "SUBSTRING");
	ДобавитьСтрокуВСловарь(Словарь, "ПОЛНОЕ"				, "FULL");
	ДобавитьСтрокуВСловарь(Словарь, "ПОЛУГОДИЕ"				, "HALFYEAR");
	ДобавитьСтрокуВСловарь(Словарь, "ПОМЕСТИТЬ"				, "INTO");
	ДобавитьСтрокуВСловарь(Словарь, "ПРАВОЕ"				, "RIGHT");
	ДобавитьСтрокуВСловарь(Словарь, "ПРЕДСТАВЛЕНИЕ"			, "PRESENTATION");
	ДобавитьСтрокуВСловарь(Словарь, "ПРЕДСТАВЛЕНИЕССЫЛКИ"	, "REFPRESENTATION");
	ДобавитьСтрокуВСловарь(Словарь, "ПУСТАЯТАБЛИЦА"			, "EMPTYTABLE");
	ДобавитьСтрокуВСловарь(Словарь, "РАЗЛИЧНЫЕ"				, "DISTINCT");
	ДобавитьСтрокуВСловарь(Словарь, "РАЗНОСТЬДАТ"			, "DATEDIFF");
	ДобавитьСтрокуВСловарь(Словарь, "РАЗРЕШЕННЫЕ"			, "ALLOWED");
	ДобавитьСтрокуВСловарь(Словарь, "СЕКУНДА"				, "SECOND");
	ДобавитьСтрокуВСловарь(Словарь, "СПЕЦСИМВОЛ"			, "ESCAPE");
	ДобавитьСтрокуВСловарь(Словарь, "СРЕДНЕЕ"				, "AVG");
	ДобавитьСтрокуВСловарь(Словарь, "ССЫЛКА"				, "REFS");
	ДобавитьСтрокуВСловарь(Словарь, "СТРОКА"				, "STRING");
	ДобавитьСтрокуВСловарь(Словарь, "СУММА"					, "SUM");
	ДобавитьСтрокуВСловарь(Словарь, "ТОГДА"					, "THEN");
	ДобавитьСтрокуВСловарь(Словарь, "ТИП"					, "TYPE");
	ДобавитьСтрокуВСловарь(Словарь, "ТИПЗНАЧЕНИЯ"			, "VALUETYPE");
	ДобавитьСтрокуВСловарь(Словарь, "ТОЛЬКО"				, "ONLY");
	ДобавитьСтрокуВСловарь(Словарь, "УБЫВ"					, "DESC");
	ДобавитьСтрокуВСловарь(Словарь, "ЧАС"					, "HOUR");
	ДобавитьСтрокуВСловарь(Словарь, "ЧИСЛО"					, "NUMBER");
	ДобавитьСтрокуВСловарь(Словарь, "УНИЧТОЖИТЬ"			, "DROP");

	ДобавитьСтрокуВСловарь(Словарь, "ДЛЯ"					, "FOR");
	ДобавитьСтрокуВСловарь(Словарь, "ИЗМЕНЕНИЯ"				, "UPDATE");
	ДобавитьСтрокуВСловарь(Словарь, "ИНДЕКСИРОВАТЬ"			, "INDEX");
	ДобавитьСтрокуВСловарь(Словарь, "СГРУППИРОВАТЬ"			, "GROUP");
	ДобавитьСтрокуВСловарь(Словарь, "УПОРЯДОЧИТЬ"			, "ORDER");

	ДобавитьСтрокуВСловарь(Словарь, "ИТОГИ"					, "TOTALS");
	ДобавитьСтрокуВСловарь(Словарь, "СОЕДИНЕНИЕ"			, "JOIN");

	ДобавитьСтрокуВСловарь(Словарь, "ПО"					, "BY"		,"ВЫБРАТЬ"		, "ИНДЕКСИРОВАТЬ ПО");
	ДобавитьСтрокуВСловарь(Словарь, "ПО"					, "BY"		,"ВЫБРАТЬ"		, "СГРУППИРОВАТЬ ПО");
	ДобавитьСтрокуВСловарь(Словарь, "ПО"					, "BY"		,"УПОРЯДОЧИТЬ ПО");
	ДобавитьСтрокуВСловарь(Словарь, "ПО"					, "BY"		,"ИТОГИ"			);
	ДобавитьСтрокуВСловарь(Словарь, "ПО"					, "ON"		,"ВЫБРАТЬ"		, "ИЗ");

	Возврат Словарь;

КонецФункции // СоздатьАнглоРусскийСловарь()

Процедура ДобавитьСтрокуВСловарь(Словарь, Русский, Английский, Секция = "", Предложение = "")

	НоваяСтрока = Словарь.Добавить();
	НоваяСтрока.Русский		= Русский;
	НоваяСтрока.Английский = Английский;
	НоваяСтрока.Секция		= Секция;
	НоваяСтрока.Предложение = Предложение;

КонецПроцедуры

// ++ tristarr1 Оптимизация открытия формы выбора типов.
Функция СформироватьСтруктуруТипов() Экспорт

	СтруктураТипов = ПолучитьСтруктуруТипов();
	СтруктураИзображений = ПолучитьСтруктуруИзображений();
	Дерево = СтруктураТипов.ДеревоТипов;
	Таблица = СтруктураТипов.ТаблицаТипов;

	ЗаполнитьСтрокуДерева(Дерево, "Число"					, "Число"					, СтруктураИзображений.Число);
	ЗаполнитьСтрокуДерева(Дерево, "Строка"					, "Строка"					, СтруктураИзображений.Строка);
	ЗаполнитьСтрокуДерева(Дерево, "Дата"					, "Дата"					, СтруктураИзображений.Дата);
	ЗаполнитьСтрокуДерева(Дерево, "Булево"					, "Булево"					, СтруктураИзображений.Булево);
	ЗаполнитьСтрокуДерева(Дерево, "УникальныйИдентификатор" , "Уникальный идентификатор", СтруктураИзображений.УникальныйИдентификатор);
	ЗаполнитьСтрокуДерева(Дерево, "Null"					, "Null"					);
	ЗаполнитьСтрокуДерева(Дерево, "Неопределено"			, "Неопределено"			);

	ВывестиКоллекцию(Дерево, "Справочники"					, "Справочник");
	ВывестиКоллекцию(Дерево, "Документы"					, "Документ");
	ВывестиКоллекцию(Дерево, "Перечисления"					, "Перечисление");
	ВывестиКоллекцию(Дерево, "ПланыВидовХарактеристик"		, "ПланВидовХарактеристик");
	ВывестиКоллекцию(Дерево, "ПланыСчетов"					, "ПланСчетов");
	ВывестиКоллекцию(Дерево, "ПланыВидовРасчета"			, "ПланВидовРасчета");
	ВывестиКоллекцию(Дерево, "БизнесПроцессы"				, "БизнесПроцесс");
	ВывестиКоллекцию(Дерево, "Задачи"						, "Задача");

	ЗаполнитьСтрокуТаблицы(Таблица, "ТаблицаЗначений"		, "Таблица значений"		, СтруктураИзображений.ТаблицаЗначений);
	ЗаполнитьСтрокуТаблицы(Таблица, "МоментВремени"			, "Момент времени"			, СтруктураИзображений.МоментВремени);
	ЗаполнитьСтрокуТаблицы(Таблица, "Граница"				, "Граница"					, БиблиотекаКартинок.УстановитьИнтервал);

	ЗаполнитьСтрокуТаблицы(Таблица, "ВидДвиженияНакопления" , "Вид движения накопления" , БиблиотекаКартинок.УстановитьИнтервал);
	ЗаполнитьСтрокуТаблицы(Таблица, "ВидСчета"				, "Вид счета"				, БиблиотекаКартинок.УстановитьИнтервал);
	ЗаполнитьСтрокуТаблицы(Таблица, "ВидДвиженияБухгалтерии", "Вид движения бухгалтерии", БиблиотекаКартинок.УстановитьИнтервал);

	Возврат СтруктураТипов;
КонецФункции

Функция ПолучитьСтруктуруТипов()
	ДеревоТипов = Новый ДеревоЗначений;
	ДеревоТипов.Колонки.Добавить("Выбрать",ОТБулево);
	ДеревоТипов.Колонки.Добавить("ИмяТипа",ОТСтрока);
	ДеревоТипов.Колонки.Добавить("Картинка",ОТКартинка);
	ДеревоТипов.Колонки.Добавить("Синоним",ОТСтрока);

	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Выбрать",ОТБулево);
	ТаблицаТипов.Колонки.Добавить("ИмяТипа",ОТСтрока);
	ТаблицаТипов.Колонки.Добавить("Картинка",ОТКартинка);
	ТаблицаТипов.Колонки.Добавить("Синоним",ОТСтрока);

	Возврат Новый Структура("ДеревоТипов,ТаблицаТипов",ДеревоТипов,ТаблицаТипов);
КонецФункции

Функция ЗаполнитьСтрокуДерева(КонтейнерСтрок, ИмяТипа = "", Синоним = "", Картинка = Неопределено)

	НоваяСтрока = КонтейнерСтрок.Строки.Добавить();
	НоваяСтрока.ИмяТипа = ИмяТипа;
	НоваяСтрока.Синоним = Синоним;
	Если НЕ Картинка = Неопределено Тогда
		НоваяСтрока.Картинка = Картинка;
	КонецЕсли;

	Возврат НоваяСтрока;

КонецФункции

Процедура ВывестиКоллекцию(КонтейнерСтрок, ИмяКоллекции = "", ИмяЭлемента = "")

	Ветка = ЗаполнитьСтрокуДерева(КонтейнерСтрок, ИмяКоллекции, ИмяЭлемента + "Ссылка", БиблиотекаКартинок[ИмяЭлемента]);

	Для Каждого МетаДок Из Метаданные[ИмяКоллекции] Цикл
		ЗаполнитьСтрокуДерева(Ветка, МетаДок.Имя, ИмяЭлемента + "Ссылка." + МетаДок.Имя, БиблиотекаКартинок[ИмяЭлемента]);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруИзображений()
	СтруктураИзображений = Новый Структура;
	МакетИзображений = ПолучитьМакет("ИзображенияМетаданных");
	Для Каждого ОбластьТД Из МакетИзображений.Области Цикл
		Если ТипЗнч(ОбластьТД) = ТипРисунокТабличногоДокумента Тогда
			СтруктураИзображений.Вставить(ОбластьТД.Имя,ОбластьТД.Картинка);
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураИзображений;
КонецФункции

Процедура ЗаполнитьСтрокуТаблицы(КонтейнерСтрок, ИмяТипа = "", Синоним = "", Картинка = Неопределено)

	НоваяСтрока = КонтейнерСтрок.Добавить();
	НоваяСтрока.ИмяТипа = ИмяТипа;
	НоваяСтрока.Синоним = Синоним;
	Если НЕ Картинка = Неопределено Тогда
		НоваяСтрока.Картинка = Картинка;
	КонецЕсли;

КонецПроцедуры
// -- tristarr1 Оптимизация открытия формы выбора типов.

Функция ПроверитНаличиеИспользуемыхПеременных(Знач Текст)

	ОписаниеОшибки = "";

	МассивСлов = Новый Массив;
	МассивСлов.Добавить("ппСтруктураДанных");
	МассивСлов.Добавить("ппМВТ");
	МассивСлов.Добавить("ппПутьКХранилищу");
	МассивСлов.Добавить("ЭтотОбъект");
	МассивСлов.Добавить("ппХранилище");
	МассивСлов.Добавить("ЗапросИД");
	МассивСлов.Добавить("ппОтбор");
	МассивСлов.Добавить("ппЗапрос");

	МассивНайденныхСлов = Новый Массив;

	Текст2 = "";

	Для i = 1 По СтрДлина(Текст) Цикл

		ТекСимвол = Сред(Текст, i, 1);
		Текст2 = Текст2 + ?(ПустаяСтрока(ТекСимвол), " ", ТекСимвол);

	КонецЦикла;

	Текст2 = ВРег(" " + Текст2 + " ");

	Для Каждого Элемент Из МассивСлов Цикл

		Если СтрНайти(Текст2, ВРег(" " + Элемент + " ")) Тогда

			МассивНайденныхСлов.Добавить(Элемент);

		КонецЕсли;

	КонецЦикла;

	Если МассивНайденныхСлов.Количество() > 0 Тогда

		ОписаниеОшибки = "Выражение параметра содержит используемые имена переменных: " + Символы.ПС;

		Первый = Истина;
		Для Каждого Элемент Из МассивНайденныхСлов Цикл

			ОписаниеОшибки = ОписаниеОшибки + ?(Первый, "", ", ") + """" + Элемент + """";
			Первый = Ложь;
		КонецЦикла;

		ОписаниеОшибки = ОписаниеОшибки + ".";

	КонецЕсли;

	Возврат ОписаниеОшибки;

КонецФункции

Функция СоздатьТекстПрисвоенияЗначенийПеременнымПараметров(ПутьКХранилищу, ИД, РежимСовместимости, ТолькоИспользуемые = Истина) Экспорт

	ЭтотОбъект.РежимСовместимости = РежимСовместимости;

	ТекстКода = "";

	пХранилище = ПолучитьИзВременногоХранилища(ПутьКХранилищу);

	пТабПараметров = пХранилище.ТабПараметров;

	ОтборИД = Новый Структура("ИД", ИД);

	пТабПараметровИД = пТабПараметров.НайтиСтроки(ОтборИД);

	Для Каждого СтрокаПараметра Из пТабПараметровИД Цикл

		Если НЕ СтрокаПараметра.Используется И ТолькоИспользуемые Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаПараметра.ОграничениеТипов.СписокЗначений Тогда
			ТекстКода = ТекстКода + "	" + СтрокаПараметра.Название + " = Новый Массив;" + Символы.ПС;
			Для Каждого Запись Из СтрокаПараметра.Значение Цикл
				ПЗ = ПредставлениеЗначения(Запись.Значение);
				ТекстКода = ТекстКода + "	" + СтрокаПараметра.Название + ".Добавить(" + ПЗ.Значение + ");" + ПЗ.Комментарий + Символы.ПС;
			КонецЦикла;
		ИначеЕсли СтрокаПараметра.Вычисляемый Тогда
			ПЗ = ОбработатьТекстПараметра(СтрокаПараметра.Значение, СтрокаПараметра.Название);
			ТекстКода = ТекстКода + ПЗ.Значение + Символы.ПС;
		Иначе
			ПЗ = ПредставлениеЗначения(СтрокаПараметра.Значение);
			ТекстКода = ТекстКода + "	" + СтрокаПараметра.Название + " = " + ПЗ.Значение + ";" + ПЗ.Комментарий + Символы.ПС;
		КонецЕсли;

		ТекстКода = ТекстКода + Символы.ПС;

	КонецЦикла;

	Возврат ТекстКода;

КонецФункции

Функция ПредставлениеЗначения(Значение)

	Комментарий = "";
	Представление = Значение;

	Если Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч(Значение) = ТипСтрока Тогда
		Представление = Значение;
	ИначеЕсли ТипЗнч(Значение) = ТипЧисло Тогда
		Представление = Формат(Значение, "ЧРД=.; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение) = ТипБулево Тогда
		Представление = Формат(Значение, "БЛ=Ложь; БИ=Истина");
	ИначеЕсли ТипЗнч(Значение) = ТипДата Тогда
		Представление = Формат(Значение, "ДФ='Дата(yyyy, MM, dd, HH, mm, ss)'; ДП='Дата(1, 1, 1, 0, 0, 0)'");

	ИначеЕсли ТипВсеСсылки_Справочники.СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, СтрНайти(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "Справочники." + ИмяКоллекции + "." + Справочники[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение);
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "Справочники." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "Справочники." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Значение.Наименование + """)";
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		КонецЕсли;

	ИначеЕсли ТипВсеСсылки_Документы.СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, СтрНайти(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Пустая() Тогда
			Представление = "Документы." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "Документы." + ИмяКоллекции + ".НайтиПоНомеру(""" + Формат(Значение.Номер, "ЧГ=0") + """, " + Формат(Значение.Дата, "ДФ='Дата(yyyy, MM, dd, HH, mm, ss)'; ДП='Дата(1, 1, 1, 0, 0, 0)'") + ")";
			Комментарий = " // " + Строка(Значение);
		КонецЕсли;

	ИначеЕсли ТипВсеСсылки_Перечисления.СодержитТип(ТипЗнч(Значение)) Тогда
		ИмяКоллекции = Значение.Метаданные().Имя;
		Если Значение.Пустая() Тогда
			Представление = "Перечисления." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			ИндексЭлемента = Перечисления[ИмяКоллекции].Индекс(Значение);
			ИмяЗначения = Метаданные.Перечисления[ИмяКоллекции].ЗначенияПеречисления[ИндексЭлемента].Имя;
			Представление = "Перечисления." + ИмяКоллекции + "." + ИмяЗначения;
			Комментарий = " // " + Строка(Значение);
		КонецЕсли;

	ИначеЕсли ТипВсеСсылки_ПланыВидовХарактеристик.СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, СтрНайти(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "ПланыВидовХарактеристик." + ИмяКоллекции + "." + ПланыВидовХарактеристик[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение);
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "ПланыВидовХарактеристик." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "ПланыВидовХарактеристик." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Значение.Наименование + """)";
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		КонецЕсли;

	ИначеЕсли ТипВсеСсылки_ПланыСчетов.СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, СтрНайти(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "ПланыСчетов." + ИмяКоллекции + "." + ПланыСчетов[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение);
			Комментарий = " // " + Значение.Код + " " + Значение.Наименование;
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "ПланыСчетов." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "ПланыСчетов." + ИмяКоллекции + ".НайтиПоКоду(" + Значение.Код + ")";
			Комментарий = " // " + Значение.Код + " " + Значение.Наименование;
		КонецЕсли;

	ИначеЕсли ТипВсеСсылки_ПланыВидовРасчета.СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, СтрНайти(ПолноеИмяКоллекции, ".") + 1);
		Если Значение.Предопределенный Тогда
			Представление = "ПланыВидовРасчета." + ИмяКоллекции + "." + ПланыВидовРасчета[ИмяКоллекции].ПолучитьИмяПредопределенного(Значение);
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		ИначеЕсли Значение.Пустая() Тогда
			Представление = "ПланыВидовРасчета." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "ПланыВидовРасчета." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Значение.Наименование + """)";
			Комментарий = " // " + Значение.Наименование + " (" + Значение.Код + ")";
		КонецЕсли;

	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, СтрНайти(ПолноеИмяКоллекции, ".") + 1);

		Если Значение.Пустая() Тогда
			Представление = "БизнесПроцессы." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "БизнесПроцессы." + ИмяКоллекции + ".НайтиПоНомеру(""" + Формат(Значение.Номер, "ЧГ=0") + """)";
			Комментарий = " // " + Строка(Значение);
		КонецЕсли;

	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ПолноеИмяКоллекции = Метаданные.НайтиПоТипу(ТипЗнч(Значение)).ПолноеИмя();
		ИмяКоллекции = Сред(ПолноеИмяКоллекции, СтрНайти(ПолноеИмяКоллекции, ".") + 1);

		Если Значение.Пустая() Тогда
			Представление = "Задачи." + ИмяКоллекции + ".ПустаяСсылка()";
			Комментарий = " // " + Представление;
		Иначе
			Представление = "Задачи." + ИмяКоллекции + ".НайтиПоНаименованию(""" + Формат(Значение.Наименование, "ЧГ=0") + """)";
			Комментарий = " // " + Строка(Значение);
		КонецЕсли;

	КонецЕсли;

	Возврат Новый Структура("Значение,Комментарий", Представление, Комментарий);

КонецФункции

Функция ОбработатьТекстПараметра(Значение, ИмяПараметра)

	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Значение);
	Строк = ТекстДок.КоличествоСтрок();

	НовыйТекстДок = Новый ТекстовыйДокумент;

	i = 1;
	Для i = 1 По Строк Цикл

		ТекСтрока = СокрЛП(ТекстДок.ПолучитьСтроку(i));

		Если ПустаяСтрока(ТекСтрока) Тогда
			НовыйТекстДок.ДобавитьСтроку("");
		ИначеЕсли Лев(ТекСтрока, 2) = "//" Тогда
			// Закоментированное игнорируется
		ИначеЕсли НРег(Лев(ТекСтрока, 8)) = "параметр" Тогда
			НовыйТекстДок.ДобавитьСтроку("	" + ИмяПараметра + Сред(ТекСтрока, 9));
		Иначе
			НовыйТекстДок.ДобавитьСтроку("	" + ТекСтрока);
		КонецЕсли;

	КонецЦикла;

	СтрокВНовом = ТекстДок.КоличествоСтрок();

	i = 1;
	НовыйТекст = "";
	Для i = 1 По СтрокВНовом Цикл

		ТекСтрока = СокрЛП(НовыйТекстДок.ПолучитьСтроку(i));
		НовыйТекст = НовыйТекст + Символы.ПС + "	" + ТекСтрока;

	КонецЦикла;

	Возврат Новый Структура("Значение,Комментарий", "	" + СокрЛП(НовыйТекст), "");

КонецФункции

Функция КоэффициентШириныКолонок(Ширина)

	Если Ширина <= 10 Тогда
		Коэффициент = 1;
	ИначеЕсли 11 <= Ширина И Ширина <= 15 Тогда
		Коэффициент = 0.93;
	ИначеЕсли 16 <= Ширина И Ширина <= 20 Тогда
		Коэффициент = 0.87;
	ИначеЕсли 21 <= Ширина И Ширина <= 50 Тогда
		Коэффициент = 0.85;
	ИначеЕсли 41 <= Ширина Тогда
		Коэффициент = 0.8;
	КонецЕсли;

	Возврат Коэффициент;

КонецФункции // КоэффициентШириныКолонок()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//			ПРОГРАММНЫЙ ИНТЕРФЕЙС АВТОРЕГИСТРАЦИИ В СПРАВОЧНИКЕ ДОПОЛНИТЕЛЬНЫЕ ОТЧЕТЫ И ОБРАБОТКИ

Функция СведенияОВнешнейОбработке() Экспорт

	лВидОбработки	= "ДополнительнаяОбработка";// "ДополнительныйОтчет"
	лОбработкаИспользование = "ОткрытиеФормы";	// "ВызовСерверногоМетода"

	лНазначение		= Неопределено;
	лБезопасныйРежим= Ложь;
	лВерсияБСП		= "2.0.1.3";

	лОбработкаИдентификатор	= Метаданные().Имя;
	лОбработкаНаименование	= Метаданные().Представление();
	лОбработкаОписание		= Метаданные().Комментарий;

	лТаблицаКоманд	= ПолучитьТаблицуКоманд();
	ДобавитьКоманду(лТаблицаКоманд,
					лОбработкаНаименование,
					лОбработкаИдентификатор,
					лОбработкаИспользование);

	лПараметрыРегистрации = Новый Структура;
	лПараметрыРегистрации.Вставить("Вид"			, лВидОбработки);
	лПараметрыРегистрации.Вставить("Назначение"		, лНазначение);
	лПараметрыРегистрации.Вставить("БезопасныйРежим", лБезопасныйРежим);
	лПараметрыРегистрации.Вставить("ВерсияБСП"		, лВерсияБСП);
	лПараметрыРегистрации.Вставить("Наименование"	, лОбработкаНаименование);
	лПараметрыРегистрации.Вставить("Информация"		, лОбработкаОписание);
	лПараметрыРегистрации.Вставить("Версия"			, мВерсияОбработки);
	лПараметрыРегистрации.Вставить("Команды"		, лТаблицаКоманд);

	Возврат лПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()

	лТипСтрока = ОТСтрока;
	лТипБулево = ОТБулево;

	лКоманды = Новый ТаблицаЗначений;

	лКоманды.Колонки.Добавить("Представление"		, лТипСтрока);
	лКоманды.Колонки.Добавить("Идентификатор"		, лТипСтрока);
	лКоманды.Колонки.Добавить("Использование"		, лТипСтрока);
	лКоманды.Колонки.Добавить("ПоказыватьОповещение", лТипБулево);
	лКоманды.Колонки.Добавить("Модификатор"			, лТипСтрока);

	Возврат лКоманды;
КонецФункции

Процедура ДобавитьКоманду(пТаблицаКоманд, пПредставление, пИдентификатор, пИспользование, пПоказыватьОповещение = Ложь, пМодификатор = "")

	лНоваяКоманда = пТаблицаКоманд.Добавить();
	лНоваяКоманда.Представление			= пПредставление;
	лНоваяКоманда.Идентификатор			= пИдентификатор;
	лНоваяКоманда.Использование			= пИспользование;
	лНоваяКоманда.ПоказыватьОповещение	= пПоказыватьОповещение;
	лНоваяКоманда.Модификатор			= пМодификатор;

КонецПроцедуры



мВерсияОбработки = Этотобъект.Метаданные().Комментарий;

ТипNULL				= Тип("Null");
ТипСтруктура		= Тип("Структура");
ТипСписокЗначений	= Тип("СписокЗначений");
ТипГраница			= Тип("Граница");
ТипМоментВремени	= Тип("МоментВремени");
ТипДата				= Тип("Дата");
ТипБулево			= Тип("Булево");
ТипРезультатЗапроса	= Тип("РезультатЗапроса");
ТипСтрока			= Тип("Строка");
ТипЧисло			= Тип("Число");
ТипМассив			= Тип("Массив");
ТипРисунокТабличногоДокумента	= Тип("РисунокТабличногоДокумента");
ТипТип				= Тип("Тип");

ОТСтрока			= Новый ОписаниеТипов("Строка");
ОТБулево			= Новый ОписаниеТипов("Булево");
ОТДата				= Новый ОписаниеТипов("Дата");
ОТТаблицаЗначений	= Новый ОписаниеТипов("ТаблицаЗначений");
ОТНеопределено		= Новый ОписаниеТипов("Неопределено");
ОТNULL				= Новый ОписаниеТипов("NULL");
ОТУникальныйИдентификатор		= Новый ОписаниеТипов("УникальныйИдентификатор");
ОТМоментВремени		= Новый ОписаниеТипов("МоментВремени");
ОТЧисло				= Новый ОписаниеТипов("Число");
ОТКартинка			= Новый ОписаниеТипов("Картинка");

ТипВсеСсылки_Документы				= Документы.ТипВсеСсылки();
ТипВсеСсылки_Справочники				= Справочники.ТипВсеСсылки();
ТипВсеСсылки_ПланыСчетов				= ПланыСчетов.ТипВсеСсылки();
ТипВсеСсылки_ПланыВидовХарактеристик = ПланыВидовХарактеристик.ТипВсеСсылки();
ТипВсеСсылки_ПланыВидовРасчета		= ПланыВидовРасчета.ТипВсеСсылки();
ТипВсеСсылки_Перечисления			= Перечисления.ТипВсеСсылки();
ТипВсеСсылки_ПланыОбмена				= ПланыОбмена.ТипВсеСсылки();
