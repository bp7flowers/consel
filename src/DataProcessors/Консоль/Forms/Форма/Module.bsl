// AKOR ОМСК

&НаКлиенте
Перем ПараметрыТЗ_ТекущиеДанные;

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Об = РеквизитФормыВЗначение("Объект");
	СтруктураХранилища = Об.СоздатьСтруктуру();

	СтруктураХранилища.Вставить("УникальныйИдентификаторФормы", ЭтотОбъект.УникальныйИдентификатор);

	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураХранилища, ЭтотОбъект.УникальныйИдентификатор);

	ДобавитьНовуюСтрокуДЗ(Неопределено, Ложь);

	СисИнфо = Новый СистемнаяИнформация;
	Объект.ВерсияПриложения = СисИнфо.ВерсияПриложения;

	Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
		Объект.МодальностьРазрешена = Истина;
	Иначе
		Выполнить("Объект.МодальностьРазрешена = Метаданные.РежимИспользованияМодальности = Метаданные.СвойстваОбъектов.РежимИспользованияМодальности.Использовать;");
	КонецЕсли;

	Объект.РежимСовместимости = Строка(Метаданные.РежимСовместимости); // Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_3_5

	Элементы.КомментарийКТекстуЗапроса.Видимость = Ложь;

	Элементы.БуферОбмена.Видимость = Ложь;

	ЗаполнитьДеревоФункцийЯзыкаЗапросов();

	МетаданныеОбработки = Об.Метаданные();
	Заголовок = МетаданныеОбработки.Синоним + " " + МетаданныеОбработки.Комментарий + ". Файл: ";

	СчетчикСтраниц = 1;

	ОбновитьУсловноеОформлениеФормы();

	Результат1.Область(2, 2).Текст = "Консоль запросов УФ " + Об.Метаданные().Комментарий;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ДеревоЗапросовСохранитьДеревоЗапросов.Доступность = НЕ ПустаяСтрока(Объект.ПутьКФайлуЗапроса);

	Заголовок = Заголовок + ?(ПустаяСтрока(Объект.ПутьКФайлуЗапроса), "Не сохранен", Объект.ПутьКФайлуЗапроса) + ".";

	ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
	ИдентификаторСтроки = Неопределено;
	ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИД", ИдентификаторСтроки, ЭлементыДерева, ТекСтрокаДЗ, Ложь);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ИдентификаторСтроки;

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	СтруктураПараметров = ПолучитьСтруктуруПараметров(Истина);

	Настройки.Вставить("СтруктураПараметров", СтруктураПараметров);

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметров(Закрытие)

	_СтруктураПараметров = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);

	Если Закрытие Тогда
		СтруктураПараметров = _СтруктураПараметров;
	Иначе
		СтруктураПараметров = Новый Структура;
		Для Каждого КлючИЗначение Из _СтруктураПараметров Цикл
			СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;

	// Удаление выгруженых ТЗ
	пТаблицаПакетов = СтруктураПараметров.ТаблицаПакетов;
	пСтруктураТЗ	= СтруктураПараметров.СтруктураТЗ;

	Для Каждого СтрокаПакета Из пТаблицаПакетов Цикл
		Если НЕ СтрокаПакета.Адрес = "" И пСтруктураТЗ.Свойство(СтрокаПакета.Адрес) Тогда
			пСтруктураТЗ.Удалить(СтрокаПакета.Адрес);
		КонецЕсли;
		СтрокаПакета.Адрес = "";
	КонецЦикла;

	Если СтруктураПараметров.Свойство("СтруктураТипов") Тогда
		СтруктураПараметров.Удалить("СтруктураТипов");
	КонецЕсли;

	СтруктураПараметров.СтруктурыРезультатовЗапросовТабДоков.Очистить();
	СтруктураПараметров.СтруктураРезультатовЗапросов.Очистить();

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметров()

&НаСервере
Процедура СохранениеДанныхВНастройкахНаСервере()

	Настройки = Новый Соответствие;

	СтруктураПараметров = ПолучитьСтруктуруПараметров(Ложь);

	лДеревоЗапросов = РеквизитФормыВЗначение("ДеревоЗапросов", Тип("ДеревоЗначений" ));
	лПараметрыТЗ	= РеквизитФормыВЗначение("ПараметрыТЗ"	, Тип("ТаблицаЗначений"));
	лВТ				= РеквизитФормыВЗначение("ВТ"			, Тип("ТаблицаЗначений"));

	Настройки.Вставить("ДеревоЗапросов"			, лДеревоЗапросов);
	Настройки.Вставить("ТекСтрокаДЗ"				, ТекСтрокаДЗ);
	Настройки.Вставить("Объект.ПутьКФайлуЗапроса" , Объект.ПутьКФайлуЗапроса);
	Настройки.Вставить("СтруктураПараметров"		, СтруктураПараметров);
	Настройки.Вставить("Объект.ЛимитВыводимыхСтрок", Объект.ЛимитВыводимыхСтрок);
	Настройки.Вставить("ПараметрыТЗ"				, лПараметрыТЗ);
	Настройки.Вставить("ВТ"						, лВТ);

	ХранилищеСистемныхНастроек.Сохранить(ПолучитьИмяОбработки() + ".Форма.Форма/ТекущиеДанные", , Настройки);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	СтруктураПараметров = Настройки["СтруктураПараметров"];

	Если НЕ СтруктураПараметров = Неопределено Тогда
		Об = РеквизитФормыВЗначение("Объект");
		СтруктураХранилища = Об.СоздатьСтруктуру();
		ОбновитьРеквизиты(СтруктураПараметров, СтруктураХранилища);
		Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураПараметров, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если НЕ ЗавершениеРаботы = Неопределено И ЗавершениеРаботы Тогда
		ТекстПредупреждения =
		"Внимание! Если, в консоли запросов имеются несохранённые данные, то они будут потеряны!
		|Для сохранения изменений нажмите ""Продолжить работу"", закройте консоль запросов, а потом завершите работу приложение.";
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если НЕ ЭтотОбъект.ЗакрытьФорму Тогда

		#Если Не ВебКлиент Тогда

			Отказ = Истина;

			ТекстВопроса = "Закрыть консоль запросов?";

			Если Объект.МодальностьРазрешена Тогда
				КодВыполнения = "
				|Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				|ПередЗакрытиемЗавершение(Ответ, Отказ);";
			Иначе
				Отказ = Истина;
				КодВыполнения = "
				|Оповещение = Новый ОписаниеОповещения(""ПередЗакрытиемЗавершение"", ЭтотОбъект);
				|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);";
			КонецЕсли;

			Выполнить(КодВыполнения);

		#КонецЕсли

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, Отказ = Истина) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.ЗакрытьФорму = Истина;
		Отказ = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизиты(Проверяемые, Шаблон)

	Для Каждого ЭлементШаблона Из Шаблон Цикл

		пЗначениеПроверяемое = Неопределено;
		Если НЕ Проверяемые.Свойство(ЭлементШаблона.Ключ, пЗначениеПроверяемое) Тогда
			Проверяемые.Вставить(ЭлементШаблона.Ключ, ЭлементШаблона.Значение);
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(пЗначениеПроверяемое) = Тип("ТаблицаЗначений") Тогда
			КолонкиШаблона = ЭлементШаблона.Значение.Колонки;
			Для Каждого пКолШ Из КолонкиШаблона Цикл
				НайденнаяКолонка = пЗначениеПроверяемое.Колонки.Найти(пКолШ.Имя);
				Если НайденнаяКолонка = Неопределено Тогда
					пЗначениеПроверяемое.Колонки.Добавить(пКолШ.Имя, пКолШ.ТипЗначения);
				Иначе // проверим тип
					Если НЕ НайденнаяКолонка.ТипЗначения = пКолШ.ТипЗначения Тогда
						пЗначениеПроверяемое.Колонки.Удалить(НайденнаяКолонка);
						пЗначениеПроверяемое.Колонки.Добавить(пКолШ.Имя, пКолШ.ТипЗначения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоФункцийЯзыкаЗапросов()

	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	МассивГоризонтальный = Новый Массив;
	СоответствиеКоманд = Новый Структура;
	Дерево = ДанныеФормыВЗначение(ФункцииЯзыкаЗапросов, Тип("ДеревоЗначений"));

	Родитель = Дерево;

	R = 0;
	Пока Истина Цикл
		R = R + 1;
		Область = Макет.Область(R, 1);
		ТекстЯчейки = Область.Текст;
		Если ПустаяСтрока(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли;

		Уровень = Область.Отступ;
		Пока МассивГоризонтальный.ВГраница() < Уровень Цикл
			МассивГоризонтальный.Добавить("");
		КонецЦикла;

		Если Уровень = 0 Тогда
			Родитель = Дерево;
		Иначе
			Родитель = МассивГоризонтальный[Уровень-1];
		КонецЕсли;

		ТекСтрока = Родитель.Строки.Добавить();
		МассивГоризонтальный[Уровень] = ТекСтрока;

		ТекСтрока.Наименование = ТекстЯчейки;

	КонецЦикла;

	ЗначениеВДанныеФормы(Дерево, ФункцииЯзыкаЗапросов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ДЕРЕВА ЗАПРОСОВ

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	Если Элементы.ДеревоЗапросов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ТекСтрокаДЗ = Элементы.ДеревоЗапросов.ТекущиеДанные.ИД Тогда

		ТекСтрокаДЗ = Элементы.ДеревоЗапросов.ТекущиеДанные.ИД;
		ПодключитьОбработчикОжидания("ДеревоЗапросовПриАктивизацииСтрокиЗавершение", 0.1, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтрокиЗавершение()
	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные(, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	ИдентификаторСтроки = Элемент.ТекущиеДанные;
	Если НЕ ИдентификаторСтроки = Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтроки.ПолучитьИдентификатор();
	КонецЕсли;
	ДобавитьНовуюСтрокуДЗ(ИдентификаторСтроки, Копирование);

КонецПроцедуры

&НаСервере
Процедура ДобавитьНовуюСтрокуДЗ(ИДСтроки, Копирование)

	ДЗ = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));

	Если ИДСтроки = Неопределено Тогда
		ИДСтроки = 0;
		СтрокаРодитель = ДЗ;
	Иначе
		ИД = ЭтотОбъект.ДеревоЗапросов.НайтиПоИдентификатору(ИДСтроки).ИД;
		СтрокаРодитель = ДЗ.Строки.Найти(ИД, "ИД", Истина);
	КонецЕсли;

	НоваяСтрокаДЗ = СтрокаРодитель.Строки.Добавить();
	Если Копирование Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДЗ, СтрокаРодитель);
	КонецЕсли;

	ИДСтроки = Строка(Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"));
	НоваяСтрокаДЗ.ИД = ИДСтроки;
	НоваяСтрокаДЗ.Наименование = "Запрос";
	ЗначениеВДанныеФормы(ДЗ, ДеревоЗапросов);

	ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
	ИдентификаторСтроки = Неопределено;
	ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИД", ИдентификаторСтроки, ЭлементыДерева, ИДСтроки, Ложь);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ИдентификаторСтроки;

	Если Копирование Тогда
		СкопироватьПараметрыЗапроса(СтрокаРодитель.ИД, НоваяСтрокаДЗ.ИД);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьПараметрыЗапроса(ИД_Источника, ИД_Копии)

	Отбор = Новый Структура("ИД", ИД_Источника);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	пТабПараметров = пХранилище.ТабПараметров;

	ОтобранныеСтроки = пТабПараметров.НайтиСтроки(Отбор);

	Для Каждого СтрокаПарам Из ОтобранныеСтроки Цикл
		НовСтр = пТабПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПарам);
		НовСтр.ИД = ИД_Копии;
	КонецЦикла;

	пТабПакетов = пХранилище.ТаблицаПакетов;

	ОтобранныеСтроки = пТабПакетов.НайтиСтроки(Отбор);

	Для Каждого СтрокаПарам Из ОтобранныеСтроки Цикл
		НовСтр = пТабПакетов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПарам);
		НовСтр.ИД = ИД_Копии;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	// ++
	СтрокаДляВыделения = Неопределено;
	НайтиСтрокуДляВыделения(ДеревоЗапросов, Элемент.ТекущиеДанные.ИД, СтрокаДляВыделения);
	// --
	УдалитьПараметрыЗапроса(Элемент.ТекущиеДанные.ИД);
	// ++
	Если НЕ СтрокаДляВыделения = ДеревоЗапросов Тогда
		ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
		ИдентификаторСтроки = Неопределено;
		ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИД", ИдентификаторСтроки, ЭлементыДерева, СтрокаДляВыделения.ИД, Ложь);
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	// --

КонецПроцедуры
// ++
&НаКлиенте
Процедура НайтиСтрокуДляВыделения(Узел, ДочкаИД, СтрокаДляВыделения)

	КоллекцияУзел = Узел.ПолучитьЭлементы();
	Для Каждого Ветка Из КоллекцияУзел Цикл
		Если Ветка.ИД = ДочкаИД Тогда
			РодительУдаляемойСтроки = Узел;
			//
			КоличествоВеток = КоллекцияУзел.Количество();
			Если КоличествоВеток = 1 Тогда
				СтрокаДляВыделения = РодительУдаляемойСтроки;
			Иначе
				ПорядокВетки = КоллекцияУзел.Индекс(Ветка) + 1;
				Если КоличествоВеток > ПорядокВетки Тогда
					СтрокаДляВыделения = КоллекцияУзел[ПорядокВетки];
				Иначе
					СтрокаДляВыделения = КоллекцияУзел[ПорядокВетки - 2];
				КонецЕсли;

			КонецЕсли;

			Прервать;
		КонецЕсли;
		НайтиСтрокуДляВыделения(Ветка, ДочкаИД, СтрокаДляВыделения);
	КонецЦикла;

КонецПроцедуры // НайтиРодителя()
// --

&НаСервере
Процедура УдалитьПараметрыЗапроса(ИДСтроки)

	пХранилище		= ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	пТабПараметров = пХранилище.ТабПараметров;
	пТаблицаПакетов = пХранилище.ТаблицаПакетов;
	пСтруктураТЗ	= пХранилище.СтруктураТЗ;

	ДЗ = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	СтрДЗ = ДЗ.Строки.НайтиСтроки(Новый Структура("ИД", ИДСтроки), Истина)[0];
	МассивИД = Неопределено;
	ПолучитьИДВсейВеткиИзДЗ(СтрДЗ, МассивИД);

	Если СтрДЗ.Родитель = Неопределено Тогда
		ДЗ.Строки.Удалить(СтрДЗ);
	Иначе
		СтрДЗ.Родитель.Строки.Удалить(СтрДЗ);
	КонецЕсли;

	ЗначениеВДанныеФормы(ДЗ, ДеревоЗапросов);

	Для Каждого СтрокаИД Из МассивИД Цикл

		Отбор = Новый Структура("ИД", СтрокаИД);

		// Параметры
		ОтобранныеСтроки = пТабПараметров.НайтиСтроки(Отбор);

		Для Каждого СтрокаОтбора Из ОтобранныеСтроки Цикл
			пТабПараметров.Удалить(СтрокаОтбора);
		КонецЦикла;

		// Пакеты
		ОтобранныеСтроки = пТаблицаПакетов.НайтиСтроки(Отбор);

		Для Каждого СтрокаОтбора Из ОтобранныеСтроки Цикл
			Если НЕ СтрокаОтбора.Адрес = "" И пСтруктураТЗ.Свойство(СтрокаОтбора.Адрес) Тогда
				пСтруктураТЗ.Удалить(СтрокаОтбора.Адрес);
			КонецЕсли;
			пТаблицаПакетов.Удалить(СтрокаОтбора);
		КонецЦикла;

	КонецЦикла;

	ПараметрыТЗ.Очистить();
	ВТ.Очистить();

КонецПроцедуры

&НаСервере
Процедура ПолучитьИДВсейВеткиИзДЗ(ВеткаДЗ, МассивИД)

	Если МассивИД = Неопределено Тогда
		МассивИД = Новый Массив;
		МассивИД.Добавить(ВеткаДЗ.ИД);
	КонецЕсли;

	Для Каждого СтрокаДЗ Из ВеткаДЗ.Строки Цикл
		МассивИД.Добавить(СтрокаДЗ.ИД);
		ПолучитьИДВсейВеткиИзДЗ(СтрокаДЗ, МассивИД);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	ИдентификаторПеремещаемойСтроки = ПараметрыПеретаскивания.Значение[0];
	ПеремещаемаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторПеремещаемойСтроки);

	Если Строка = Неопределено Тогда
		МожноПеретаскивать = Истина;
	Иначе
		НовыйРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		МожноПеретаскивать = ПроверитьВозможностьПереноса(ПеремещаемаяСтрока, НовыйРодитель);
	КонецЕсли;

	Если МожноПеретаскивать Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда

		ИдентификаторПеремещаемойСтроки = ПараметрыПеретаскивания.Значение[0];
		ПеремещаемаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(ИдентификаторПеремещаемойСтроки);

		Если Строка = Неопределено Тогда
			НовыйРодитель = ДеревоЗапросов;
		Иначе
			НовыйРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Строка);
		КонецЕсли;

		НоваяСтрока = СкопироватьСтрокуДерева(ДеревоЗапросов, НовыйРодитель, ПеремещаемаяСтрока);

		ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
		ИдентификаторСтроки = Неопределено;
		ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИД", ИдентификаторСтроки, ЭлементыДерева, НоваяСтрока.ИД, Ложь);
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ИдентификаторСтроки;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(Знач ПереносимыйЭлемент, Знач НовыйРодитель)

	Пока НЕ НовыйРодитель = Неопределено Цикл
		Если ПереносимыйЭлемент = НовыйРодитель Тогда
			Возврат Ложь;
		КонецЕсли;
		НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

	Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Приемник = Неопределено Тогда
		НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

	КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
	Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
		ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
			[КолПодчиненныхСтрок - ОбратныйИндекс];
		СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
	КонецЦикла;

	Если Источник.ПолучитьРодителя() = Неопределено Тогда
		РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
	Иначе
		Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
	КонецЕсли;

	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Процедура ДеревоЗапросовВыполнитьВГруппеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;

	ТекущиеДанные.ВыполнитьВГруппе = ?(ТекущиеДанные.ВыполнитьВГруппе = 2, 0, ТекущиеДанные.ВыполнитьВГруппе);

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)

	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.ВыполнитьВГруппе;
	Для Каждого Потомок Из Потомки Цикл
		Потомок.ВыполнитьВГруппе = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)

	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для Каждого Потомок Из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.ВыполнитьВГруппе = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.ВыполнитьВГруппе);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.ВыполнитьВГруппе = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.ВыполнитьВГруппе = 2;
		Иначе
			Родитель.ВыполнитьВГруппе = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапросыВетки(Команда)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();

	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 И НЕ ТекущийРодитель = Неопределено Тогда

		ТекущиеДанные = ТекущийРодитель;

	КонецЕсли;

	МассивИД = Новый Массив;

	СобратьИДДляГрупповогоВыполненияЗапроса(ТекущиеДанные, МассивИД);
	ВыполнитьЗапросы(МассивИД);

КонецПроцедуры

&НаКлиенте
Процедура СобратьИДДляГрупповогоВыполненияЗапроса(Ветка, Массив)

	Если Ветка.ВыполнитьВГруппе Тогда
		Массив.Добавить(Ветка.ИД);
	КонецЕсли;

	Для Каждого Сучек Из Ветка.ПолучитьЭлементы() Цикл
		СобратьИДДляГрупповогоВыполненияЗапроса(Сучек, Массив);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросы(МассивИД)

	СохранениеДанныхВНастройкахНаСервере();

	МВТ = Новый МенеджерВременныхТаблиц;
	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
	ЭтотОбъект[пИмя].Очистить();

	Для Каждого Элемент Из МассивИД Цикл

		СтруктураПараметров = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
		ДанныеВеткиДЗ = Новый Структура;
		ДанныеВеткиДЗ.Вставить("ИД", Элемент);
		СтруктураПараметров.Вставить("ОписаниеТекущейВеткиДЗ", ДанныеВеткиДЗ);
		Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураПараметров, ЭтотОбъект.УникальныйИдентификатор);

		Об = РеквизитФормыВЗначение("Объект");
		Об.ОбработатьЗапрос(, МВТ);
		ЗначениеВРеквизитФормы(Об, "Объект");

		ВывестиРезультат(ТекДанныеДерева.ИД = Элемент, Ложь);

	КонецЦикла;

	МВТ = Неопределено;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОПЕРАЦИИ С БУФЕРОМ ОБМЕНА

&НаКлиенте
Процедура КопироватьТекстЗапросаВБуферОбмена(Команда)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьТекстЗапросаВБуферОбмена(ТекущиеДанные.Текст);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстЗапросаИзБуфераОбмена(Команда)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Текст = ПолучитьТекстБуфераОбмена();
	ТекущиеДанные.Текст = Текст;

	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаВБуферОбмена(Текст)

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На сервере не работает.");

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстБуфераОбмена()

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На сервере не работает.");

	Возврат "";

КонецФункции

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ИЗМЕНЯЮЩИЕ ТЕКСТА ЗАПРОСА

&НаКлиенте
Процедура ПроверитьЗапрос(Команда)

	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьФункции(Команда)

	Элементы.ФункцииЯзыкаЗапросов.Видимость = НЕ Элементы.ФункцииЯзыкаЗапросов.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ФункцииЯзыкаЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	ТекущиеДанные = ФункцииЯзыкаЗапросов.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		ПараметрыПеретаскивания.Значение = ТекущиеДанные.Наименование;
	Иначе
		ПараметрыПеретаскивания.Значение = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗначение(Команда)

	Текст = Элементы.ДеревоЗапросовТекст.ВыделенныйТекст;

	ТекстПримера = "
	|Примеры корректного выделения текста:
	|1. Справочник.СтатьиЗатрат.АмортизационнаяПремия,
	|2. ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета,
	|3. ПланСчетов.Хозрасчетный.СырьеИМатериалы.";

	Если ПустаяСтрока(Текст) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выделите текст ссылки на предопределённый элемент." + ТекстПримера);
		Возврат;
	КонецЕсли;

	Текст = СтрЗаменить(Текст, "Документ"				, "Документы");
	Текст = СтрЗаменить(Текст, "Справочник"			, "Справочники");
	Текст = СтрЗаменить(Текст, "Перечисление"			, "Перечисления");
	Текст = СтрЗаменить(Текст, "ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	Текст = СтрЗаменить(Текст, "ПланСчетов"			, "ПланыСчетов");
	Текст = СтрЗаменить(Текст, "ПланВидовРасчета"		, "ПланыВидовРасчета");
	Текст = СтрЗаменить(Текст, "ПустаяСсылка"			, "ПустаяСсылка()");

	Отмена = Ложь;
	Значение = ПолучитьЗначениеНаСервере(Текст, Отмена);

	Если Отмена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение + ТекстПримера);
		Возврат;
	КонецЕсли;

	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|ОткрытьЗначение(Значение);";
	Иначе
		ТекстКода = "
		|ПоказатьЗначение(, Значение);";
	КонецЕсли;

	Выполнить(ТекстКода);

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеНаСервере(Текст, Отмена)

	Значение = Неопределено;
	Попытка
		Выполнить("Значение = " + Текст + ";");
	Исключение
		Отмена = Истина;
		Возврат ИнформацияОбОшибке().Описание;
	КонецПопытки;

	ЭтоСсылка = Ложь;

	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			Тогда
		ЭтоСсылка = Истина;
	КонецЕсли;

	Если ЭтоСсылка И Значение.Пустая() Тогда
		Значение = "Это пустая ссылка.";
		Отмена = Истина;
	ИначеЕсли НЕ ЭтоСсылка Тогда
		Значение = "Надо выделить ссылку на предопределённый элемент.";
		Отмена = Истина;
	КонецЕсли;

	Возврат Значение;

КонецФункции

&НаКлиенте
Процедура КонструкторЗапроса(Команда)

	#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
	Если ВерсияПлатформыНиже835() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание! Данная версия клиента платформы 1С: Предприятие
		| не поддерживает запуск конструктора запросов.");
		Возврат;
	КонецЕсли;
	#КонецЕсли

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите строку дерева запросов!");
		Возврат;
	КонецЕсли;

	Текст = СокрЛП(ТекущиеДанные.Текст);

	КодПрограммы = "
	|КонструкторЗапроса = Новый КонструкторЗапроса;
	|Если НЕ ПустаяСтрока(Текст) Тогда
	|		КонструкторЗапроса.Текст = Текст;
	|КонецЕсли;
	|";

	#Если ТолстыйКлиентУправляемоеПриложение Тогда
	Попытка

		КодПрограммы = КодПрограммы+ "
		|КонструкторЗапроса.АвтоДобавлениеПредставлений = ТекущиеДанные.АвтоДобавлениеПредставлений;
		|КонструкторЗапроса.РежимКомпоновкиДанных		= ТекущиеДанные.РежимКомпоновкиДанных;
		|
		|Если КонструкторЗапроса.ОткрытьМодально() Тогда
		|	ТекущиеДанные.Текст = КонструкторЗапроса.Текст;
		|	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
		|КонецЕсли;
		|";
		Выполнить(КодПрограммы);
	Исключение
		ЖурналРегистрацииВызовСервера.ЗаписатьИсключениеВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина);
	КонецПопытки;

	#Иначе

	Попытка

		КодПрограммы = КодПрограммы+ "
		|КонструкторЗапроса.Показать(Новый ОписаниеОповещения(""ПослеРедактированияЗапроса"", ЭтотОбъект, ТекущиеДанные));
		|";
		Выполнить(КодПрограммы);
	Исключение
		ЖурналРегистрацииВызовСервера.ЗаписатьИсключениеВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина);
	КонецПопытки;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияЗапроса(Текст, ЭлементДерева) Экспорт
		Если НЕ ПустаяСтрока(Текст) Тогда
			ЭлементДерева.Текст = Текст;
			ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияПлатформыНиже835()

	лРезультат = СравнениеСТекущейВерсией("8.3.5.1068");

	Возврат ?(лРезультат = -1, Истина, Ложь);
КонецФункции

&НаСервереБезКонтекста
Функция СравнениеСТекущейВерсией(ВерсияДляСравнения)

	СисИнфо = Новый СистемнаяИнформация;
	ТекВерсия = СисИнфо.ВерсияПриложения;

	МассивТекущий = РазбитьСтрокуВМассивПодстрок(ТекВерсия);
	МассивДляСравнения = РазбитьСтрокуВМассивПодстрок(ВерсияДляСравнения);

	Для сч = 0 По 3 Цикл

		Если Число(МассивТекущий[сч]) = Число(МассивДляСравнения[сч]) Тогда
			пРезультат = 0;
		ИначеЕсли Число(МассивТекущий[сч]) > Число(МассивДляСравнения[сч]) Тогда
			пРезультат = 1;
			Прервать;
		ИначеЕсли Число(МассивТекущий[сч]) < Число(МассивДляСравнения[сч]) Тогда
			пРезультат = -1;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат пРезультат;

КонецФункции

&НаСервереБезКонтекста
Функция РазбитьСтрокуВМассивПодстрок(Строка, Разделитель = ".")

	Массив = Новый Массив;

	Тчк = СтрНайти(Строка, Разделитель);

	Пока Тчк > 0 Цикл
		Массив.Добавить(Лев(Строка, Тчк-1));
		Строка = Сред(Строка, Тчк+1);
		Тчк = СтрНайти(Строка, Разделитель);
	КонецЦикла;

	Если СтрДлина(Строка) > 0 Тогда
		Массив.Добавить(Строка);
	КонецЕсли;

	Возврат Массив;

КонецФункции

&НаКлиенте
Процедура РедактироватьВыделенныйПакет(Команда)

	#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
	Если ВерсияПлатформыНиже835() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание! Данная версия клиента платформы 1С: Предприятие
		| не поддерживает запуск конструктора запросов.");
		Возврат;
	КонецЕсли;
	#КонецЕсли

	Текст = Элементы.ДеревоЗапросовТекст.ВыделенныйТекст;
	Если ПустаяСтрока(Текст) Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выделен пакет запроса для редактирования!");
		Возврат;
	КонецЕсли;
	КодПрограммы = "
	|КонструкторЗапроса = Новый КонструкторЗапроса(Текст);
	|";

	#Если ТолстыйКлиентУправляемоеПриложение Тогда
	Попытка
		КодПрограммы = КодПрограммы+ "
		|КонструкторЗапроса.АвтоДобавлениеПредставлений = Ложь;
		|КонструкторЗапроса.РежимКомпоновкиДанных = Ложь;
		|Если КонструкторЗапроса.ОткрытьМодально() Тогда
		|	Текст = КонструкторЗапроса.Текст;
		|	Элементы.ДеревоЗапросовТекст.ВыделенныйТекст = Текст;
		|КонецЕсли;
		|";

		Выполнить(КодПрограммы);
	Исключение
		ЖурналРегистрацииВызовСервера.ЗаписатьИсключениеВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина);
	КонецПопытки;

	#Иначе

	Попытка
		пПараметры = Новый Структура("НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки");
		Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(пПараметры.НачалоСтроки, пПараметры.НачалоКолонки, пПараметры.КонецСтроки, пПараметры.КонецКолонки);
		КодПрограммы = КодПрограммы+ "
		|КонструкторЗапроса.Показать(Новый ОписаниеОповещения(""ПослеРедактированияПакета"", ЭтотОбъект, пПараметры));
		|";
		Выполнить(КодПрограммы);
	Исключение
		ЖурналРегистрацииВызовСервера.ЗаписатьИсключениеВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина);
	КонецПопытки;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияПакета(Текст, Параметры) Экспорт

	Если НЕ ПустаяСтрока(Текст) Тогда
		Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Параметры.НачалоСтроки, Параметры.НачалоКолонки, Параметры.КонецСтроки, Параметры.КонецКолонки);
		Элементы.ДеревоЗапросовТекст.ВыделенныйТекст = Текст;

		ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
		Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Параметры.НачалоСтроки, Параметры.НачалоКолонки, Параметры.КонецСтроки, Параметры.КонецКолонки);
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПереносы(Команда)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Текст = СтрЗаменить(ТекущиеДанные.Текст, "|", "");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Текст = ТекущиеДанные.Текст;

	НачалоСтроки = 0; НачалоКолонки = 0; КонецСтроки = 0; КонецКолонки = 0;
	Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);

	ПоследняяСтрока = ТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;

	ПозицияСимволовКомментария = Неопределено;
	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1);
	Для i = НачалоСтроки По КонСтроки Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(i);
		Если НЕ ЗначениеЗаполнено(Строка) Тогда
			Продолжить;
		КонецЕсли;
		НепечатаемыхСимволовСлева = СтрНайти(Строка, СокрЛП(Строка));
		ПозицияСимволовКомментария = ?(ПозицияСимволовКомментария = Неопределено, НепечатаемыхСимволовСлева, Мин(ПозицияСимволовКомментария, НепечатаемыхСимволовСлева));
	КонецЦикла;
	ПозицияСимволовКомментария = ?(ПозицияСимволовКомментария = Неопределено, 1, ПозицияСимволовКомментария);

	ТексДляВыделения = "";
	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1);
	Для i = НачалоСтроки По КонСтроки Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(i);
		Строка = Лев(Строка, ПозицияСимволовКомментария - 1) + "//" + Сред(Строка, ПозицияСимволовКомментария);
		ТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
		ТексДляВыделения = ТексДляВыделения + Символы.ПС + Строка;
	КонецЦикла;

	НовыйТекст = ТекстовыйДокумент.ПолучитьТекст();
	ТекущиеДанные.Текст = НовыйТекст;

	ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;
	ЭтотОбъект.ОбновитьОтображениеДанных();
	Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Текст = ТекущиеДанные.Текст;

	НачалоСтроки = 0; НачалоКолонки = 0; КонецСтроки = 0; КонецКолонки = 0;
	Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);

	ПоследняяСтрока = ТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;

	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1);
	Для i = НачалоСтроки По КонСтроки Цикл
		Строка = ТекстовыйДокумент.ПолучитьСтроку(i);
		Вхождение = СтрНайти(Строка, "//");
		Если Вхождение > 0 Тогда
			Строка = Лев(Строка, Вхождение-1) + Сред(Строка, Вхождение + 2);
		КонецЕсли;
		ТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
	КонецЦикла;

	ТекущиеДанные.Текст = ТекстовыйДокумент.ПолучитьТекст();
	ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;
	ЭтотОбъект.ОбновитьОтображениеДанных();
	Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1);

КонецПроцедуры

&НаКлиенте
Процедура ШрифтУвеличить(Команда)

	Размер = Элементы.ДеревоЗапросовТекст.Шрифт.Размер;

	Если Размер = -1 Тогда
		Размер = 10;
	КонецЕсли;

	Элементы.ДеревоЗапросовТекст.Шрифт = Новый Шрифт(, Размер + 1);

КонецПроцедуры

&НаКлиенте
Процедура ШрифтУменьшить(Команда)

	Размер = Элементы.ДеревоЗапросовТекст.Шрифт.Размер;

	Если Размер = -1 Тогда
		Размер = 10;
	КонецЕсли;

	Элементы.ДеревоЗапросовТекст.Шрифт = Новый Шрифт(, Размер - 1);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовТекстПриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура ВыводТекстаЗапроса(Команда)

	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);

	ПутьКФорме = ПолучитьИмяОбработки() + ".Форма.ФормаГенерацииТекстаДляМодуля";
	ПараметрыОткрытия = Новый Структура;

	ПараметрыОткрытия.Вставить("ТекстЗапроса", ТекДанныеДерева.Текст);
	ПараметрыОткрытия.Вставить("ИД", ТекДанныеДерева.ИД);
	ПараметрыОткрытия.Вставить("ПутьКХранилищу", Объект.ПутьКХранилищу);
	ПараметрыОткрытия.Вставить("РежимСовместимости", Объект.РежимСовместимости);

	пПутьКХранилищу = ОткрытьФорму(ПутьКФорме, ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура Перевод_En_Ру(Команда)

	Текст = Элементы.ДеревоЗапросов.ТекущиеДанные.Текст;
	ВыполнитьПеревод(Текст, Истина);
	Элементы.ДеревоЗапросов.ТекущиеДанные.Текст = Текст;

	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура Перевод_Ру_En(Команда)

	Текст = Элементы.ДеревоЗапросов.ТекущиеДанные.Текст;
	ВыполнитьПеревод(Текст, Ложь);
	Элементы.ДеревоЗапросов.ТекущиеДанные.Текст = Текст;

	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПеревод(Текст, РусскийЯзык = Истина)

	Об = РеквизитФормыВЗначение("Объект");
	Текст = Об.ИзменитьЯзыкЗапроса(Текст, Истина, РусскийЯзык);
	ЗначениеВРеквизитФормы(Об, "Объект");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ВЫПОЛНЕНИЯ ЗАПРОСА

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)

	ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();

	Если Объект.ОшибкиВЗапросе Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Исправьте текст запроса!");
		Возврат;
	КонецЕсли;

	Состояние("Выполняется запрос.");

	ВыполнитьЗапросСервер();

	Элементы.РедактированиеТаблицы.Пометка = Ложь;

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);

	Элементы[пИмя].Редактирование = Ложь;
	Элементы[пИмя].ОтображатьСетку = Ложь;
	Элементы[пИмя].ТолькоПросмотр = Ложь;

	Элементы.ФиксацияТабличногоДокумента.Пометка = Ложь;

	Состояние("Запрос выполнен.");

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросСервер()

	ТекущаяСтрока = Элементы.ДеревоЗапросов.ТекущаяСтрока;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СохранениеДанныхВНастройкахНаСервере();

	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);

	СтруктураПараметров = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	ДанныеВеткиДЗ = Новый Структура;
	ДанныеВеткиДЗ.Вставить("Текст", ТекДанныеДерева.Текст);
	ДанныеВеткиДЗ.Вставить("ИД", ТекДанныеДерева.ИД);
	СтруктураПараметров.Вставить("ОписаниеТекущейВеткиДЗ", ДанныеВеткиДЗ);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(СтруктураПараметров, ЭтотОбъект.УникальныйИдентификатор);

	Об = РеквизитФормыВЗначение("Объект");
	Об.ОбработатьЗапрос();
	ЗначениеВРеквизитФормы(Об, "Объект");
	ВывестиРезультат();

КонецПроцедуры

&НаСервере
Процедура ВывестиРезультат(ОбновитьТаблицуПакетов = Истина, ОчиститьТабДок = Истина)

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);

	Если ОчиститьТабДок Тогда
		ЭтотОбъект[пИмя].Очистить();
	КонецЕсли;

	ЭтотОбъект[пИмя].Вывести(пХранилище.Результат);

	СтруктураТЗ = пХранилище.СтруктураТЗ;
	пХранилище.СтруктурыРезультатовЗапросовТабДоков.Удалить(пИмя);
	СтруктураРезультатовЗапросов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пХранилище.СтруктураРезультатовЗапросов Цикл
		СтруктураРезультатовЗапросов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	пХранилище.СтруктурыРезультатовЗапросовТабДоков.Вставить(пИмя, СтруктураРезультатовЗапросов);

	Если ОбновитьТаблицуПакетов Тогда

		ТаблицаПакетов = ДанныеФормыВЗначение(ВТ, Тип("ТаблицаЗначений"));
		ТаблицаПакетов.Очистить();
		пТаблицаПакетов = пХранилище.ТаблицаПакетов;

		Отбор = Новый Структура("ИД", пХранилище.ОписаниеТекущейВеткиДЗ.ИД);

		пТабПакетов = пХранилище.ТаблицаПакетов;

		ОтобранныеСтроки = пТабПакетов.НайтиСтроки(Отбор);

		Для Каждого СтрокаПакета Из ОтобранныеСтроки Цикл
			НовСтр = ТаблицаПакетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаПакета);
		КонецЦикла;

		ЗначениеВДанныеФормы(ТаблицаПакетов, ВТ);

	КонецЕсли;

	// SG, вставка 18/06/15 >>>
	Элементы.ВТВремяВыполнения.ТекстПодвала = ВТ.Итог("ВремяВыполнения");
	// SG, вставка 18/06/15 <<<

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ПАРАМЕТРОВ

&НаКлиенте
Процедура УдалитьНеиспользуемыеПараметры(Команда)

	ТекущаяСтрока = Неопределено;
	УдалитьНеиспользуемыеПараметрыНаКлиенте(ТекущаяСтрока);
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ПараметрыТЗ.Удалить(ПараметрыТЗ.НайтиПоИдентификатору(ТекущаяСтрока));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТип(Команда)

	ТекДанныеПараметровТЗ = Элементы.ПараметрыТЗ.ТекущиеДанные;

	Если ТекДанныеПараметровТЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИзменитьТипПараметра();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКодУстановкиЗначенийПеременнымПараметров(Команда)

	ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);

	ПутьКФорме = ПолучитьИмяОбработки() + ".Форма.ФормаГенерацииТекстаПрисвоенияЗначенийПеременнымПараметров";
	ПараметрыОткрытия = Новый Структура;

	ПараметрыОткрытия.Вставить("ИД", ТекДанныеДерева.ИД);
	ПараметрыОткрытия.Вставить("ПутьКХранилищу", Объект.ПутьКХранилищу);
	ПараметрыОткрытия.Вставить("РежимСовместимости", Объект.РежимСовместимости);
	ПараметрыОткрытия.Вставить("ТолькоИспользуемые", Ложь);

	ОткрытьФорму(ПутьКФорме, ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ИмяПараметра = Элементы.ПараметрыТЗ.ТекущиеДанные.Название;

	Отбор = Новый Структура("ИД, Название", Элементы.ПараметрыТЗ.ТекущиеДанные.ИД, ИмяПараметра);

	ОписаниеВыбранныхТипов = ПолучитьОграничениеТипаЭлементаНаСервере(Отбор, Объект.ПутьКХранилищу);

	Если ОписаниеВыбранныхТипов.СписокЗначений Тогда

		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Если ТипЗнч(Элементы.ПараметрыТЗ.ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
			Элементы.ПараметрыТЗ.ТекущиеДанные.Значение.ТипЗначения = ОписаниеВыбранныхТипов.ОписаниеТипа;
		КонецЕсли;

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = Новый ОписаниеТипов("Неопределено") Тогда

		СтандартнаяОбработка = Ложь;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов();
		Элементы.ПараметрыТЗ.ТекущиеДанные.Значение = Неопределено;

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "ТаблицаЗначений" Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ОтборПараметрЗапроса", Отбор);
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаТаблицаЗначений", ПараметрыОткрытия, "", Неопределено);

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "Граница" Тогда

		СтандартнаяОбработка = Ложь;

		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ОтборПараметрЗапроса", Отбор);
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаГраница", ПараметрыОткрытия, "ПараметрыЗначениеНачалоВыбораЗавершение", Неопределено);

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = Новый ОписаниеТипов("МоментВремени") Тогда

		СтандартнаяОбработка = Ложь;

		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ОтборПараметрЗапроса", Отбор);
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаМоментВремени", ПараметрыОткрытия, "ПараметрыЗначениеНачалоВыбораЗавершение", Неопределено);

	ИначеЕсли Элементы.ПараметрыТЗ.ТекущиеДанные.Вычисляемый Тогда

		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Параметр_Имя"		, Элементы.ПараметрыТЗ.ТекущиеДанные.Название);
		ПараметрыОткрытия.Вставить("Параметр_ИД"		, Элементы.ПараметрыТЗ.ТекущиеДанные.ИД		);

		ПараметрыОткрытия.Вставить("ПутьКХранилищу"	, Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаВыбораТипа", ПараметрыОткрытия, "ИзменитьТипПараметраЗавершение", ПараметрыОткрытия);

	Иначе

		Элемент.ОграничениеТипа = ОписаниеВыбранныхТипов.ОписаниеТипа;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеНачалоВыбораЗавершение(ПолученоеЗначение, Параметры) Экспорт

	Если НЕ ПолученоеЗначение = Неопределено Тогда

		Элементы.ПараметрыТЗ.ТекущиеДанные.Значение = ПолученоеЗначение;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОграничениеТипаЭлементаНаСервере(Отбор, ПутьКХранилищу)

	пХранилище = ПолучитьИзВременногоХранилища(ПутьКХранилищу);
	МассивСтрок = пХранилище.ТабПараметров.НайтиСтроки(Отбор);

	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Новый Структура("ОписаниеТипа, СписокЗначений", Новый ОписаниеТипов("Неопределено"), Ложь);
	КонецЕсли;

	ТекПараметр =МассивСтрок[0];
	Если ТекПараметр.ОграничениеТипов.ОписаниеТипа = Новый ОписаниеТипов("ТаблицаЗначений") Тогда
		ТекПараметр.ОграничениеТипов.ОписаниеТипа = "ТаблицаЗначений";
	КонецЕсли;
	Возврат ТекПараметр.ОграничениеТипов;

КонецФункции

&НаКлиенте
Процедура ИзменитьТипПараметра()

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Параметр_Имя"		, Элементы.ПараметрыТЗ.ТекущиеДанные.Название);
	ПараметрыОткрытия.Вставить("Параметр_ИД"		, Элементы.ПараметрыТЗ.ТекущиеДанные.ИД		);

	ПараметрыОткрытия.Вставить("ПутьКХранилищу"	, Объект.ПутьКХранилищу);

	ОткрытьФормуАвтоматически("ФормаВыбораТипа", ПараметрыОткрытия, "ИзменитьТипПараметраЗавершение", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАвтоматически(ИмяФормы, ПараметрыОткрытияФормы = Неопределено, ИмяПроцедуры = "", ПараметрыПроцедуры = Неопределено)

	ПутьКФорме = ПолучитьИмяОбработки() + ".Форма." + ИмяФормы;

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|ОписаниеВыбранныхТипов = ОткрытьФормуМодально(ПутьКФорме, ПараметрыОткрытияФормы);
		|" + ИмяПроцедуры + ?(ПустаяСтрока(ИмяПроцедуры), "", "(ОписаниеВыбранныхТипов, ПараметрыПроцедуры);");
	Иначе
		КодВыполнения = "
		|" + ?(ПустаяСтрока(ИмяПроцедуры), "", "Оповещение = Новый ОписаниеОповещения(" + """" + ИмяПроцедуры + """" + ", ЭтотОбъект, ПараметрыПроцедуры);") + "
		|ОткрытьФорму(ПутьКФорме, ПараметрыОткрытияФормы, , , , , " + ?(ПустаяСтрока(ИмяПроцедуры), "", "Оповещение") + ", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипПараметраЗавершение(ОписаниеВыбранныхТипов, ПараметрыОткрытия) Экспорт

	Элемент = Элементы.ПараметрыЗначение;

	Если ОписаниеВыбранныхТипов = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура("ИД, Название", ПараметрыОткрытия.Параметр_ИД, ПараметрыОткрытия.Параметр_Имя);

	// ++ 08.09.2015 Доработка от tristarr1
	Элементы.ПараметрыТЗ.ТекущиеДанные.Вычисляемый = ОписаниеВыбранныхТипов.ТекстМодуля <> "";
	// -- 08.09.2015 Доработка от tristarr1

	Элементы.ПараметрыТЗ.ТекущиеДанные.Значение = ОписаниеВыбранныхТипов.ЗначениеДляКлиента;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗначениеПриИзменении(Элемент)

	ПараметрыЗначениеПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ПараметрыЗначениеПриИзмененииСервер(ИдентификаторСтроки = Неопределено)

	ТекДанныеПараметровТЗ = ПараметрыТЗ.НайтиПоИдентификатору(?(ИдентификаторСтроки = Неопределено, Элементы.ПараметрыТЗ.ТекущаяСтрока, ИдентификаторСтроки));
	Отбор = Новый Структура("ИД, Название", ТекДанныеПараметровТЗ.ИД, ТекДанныеПараметровТЗ.Название);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	ТаблПарам = пХранилище.ТабПараметров;
	ТекПараметр = ТаблПарам.НайтиСтроки(Отбор)[0];
	ТекПараметр.Значение = ТекДанныеПараметровТЗ.Значение;
	ТекПараметр.Свойство = ТекДанныеПараметровТЗ.Свойство;

	пХранилище.Вставить("ТабПараметров", ТаблПарам);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, ЭтотОбъект.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТЗПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ПараметрыТЗ.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ПараметрыТЗ_ТекущиеДанные = Неопределено И (ПараметрыТЗ_ТекущиеДанные.ИД = ТекущиеДанные.ИД
		И ПараметрыТЗ_ТекущиеДанные.Название = ТекущиеДанные.Название) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыТЗ_ТекущиеДанные = ТекущиеДанные;

	ИмяПараметра = ТекущиеДанные.Название;

	Отбор = Новый Структура("ИД, Название", ТекущиеДанные.ИД, ИмяПараметра);

	ОписаниеВыбранныхТипов = ПолучитьОграничениеТипаЭлементаНаСервере(Отбор, Объект.ПутьКХранилищу);

	Если ОписаниеВыбранныхТипов.СписокЗначений Тогда

		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "ТаблицаЗначений" Тогда

		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = "Граница" Тогда

		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");

	ИначеЕсли ОписаниеВыбранныхТипов.ОписаниеТипа = Новый ОписаниеТипов("МоментВремени") Тогда

		Элементы.ПараметрыЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");

	Иначе

		Элементы.ПараметрыЗначение.ОграничениеТипа = ОписаниеВыбранныхТипов.ОписаниеТипа;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТЗПередУдалением(Элемент, Отказ)

	УдалитьНеиспользуемыеПараметрыНаКлиенте(, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНеиспользуемыеПараметрыНаКлиенте(ТекущаяСтрока = Неопределено, Отказ = Ложь)

	ТекДанныеПараметровТЗ = Элементы.ПараметрыТЗ.ТекущиеДанные;

	Если ТекДанныеПараметровТЗ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекДанныеПараметровТЗ.Используется Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отказ! Параметр используется.");
		Возврат;
	КонецЕсли;

	УдалитьНеиспользуемыйПараметрНаСервере();
	ТекущаяСтрока = Элементы.ПараметрыТЗ.ТекущаяСтрока;

КонецПроцедуры

&НаСервере
Процедура УдалитьНеиспользуемыйПараметрНаСервере()

	ТекДанныеПараметровТЗ = ПараметрыТЗ.НайтиПоИдентификатору(Элементы.ПараметрыТЗ.ТекущаяСтрока);

	Если ТекДанныеПараметровТЗ.Используется Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура("ИД, Название", ТекДанныеПараметровТЗ.ИД, ТекДанныеПараметровТЗ.Название);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	ТаблПарам = пХранилище.ТабПараметров;
	ТекПараметр = ТаблПарам.НайтиСтроки(Отбор)[0];
	ТаблПарам.Удалить(ТекПараметр);
	пХранилище.Вставить("ТабПараметров", ТаблПарам);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, ЭтотОбъект.УникальныйИдентификатор);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ТАБЛИЧНОГО ДОКУМЕНТА И ЕГО КОМАНДНОЙ ПАНЕЛИ

&НаКлиенте
Процедура СвернутьВсеГруппы(Команда)

	Кнопка = Элементы.СвернутьВсеГруппы;

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);

	Если Кнопка.Заголовок = НСтр("ru = 'Свернуть все группировки'") Тогда // 0 - Свернуть
		ЭтотОбъект[пИмя].ПоказатьУровеньГруппировокСтрок(0);
		Кнопка.Заголовок = НСтр("ru = 'Развернуть все группировки'");
	Иначе // 1 -развернуть
		ЭтотОбъект[пИмя].ПоказатьУровеньГруппировокСтрок(Результат1.КоличествоУровнейГруппировокСтрок() - 1);
		Кнопка.Заголовок = НСтр("ru = 'Свернуть все группировки'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеТаблицы(Команда)

	Редактировать = НЕ Элементы.РедактированиеТаблицы.Пометка;

	Элементы.РедактированиеТаблицы.Пометка = Редактировать;

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);

	Элементы[пИмя].Редактирование = Редактировать;

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЗаголовковТабличногоДокумента(Команда)

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);

	Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка = НЕ Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка;
	Элементы[пИмя].ОтображатьЗаголовки = Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ФиксацияТабличногоДокумента(Команда)

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);

	Элементы.ФиксацияТабличногоДокумента.Пометка = НЕ Элементы.ФиксацияТабличногоДокумента.Пометка;
	УстановитьФиксацию = Элементы.ФиксацияТабличногоДокумента.Пометка;

	Если УстановитьФиксацию Тогда
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ЭтотОбъект[пИмя].ФиксацияСверху = ТекОбл.Верх - 1;
		ЭтотОбъект[пИмя].ФиксацияСлева = ТекОбл.Лево - 1;
	Иначе
		ЭтотОбъект[пИмя].ФиксацияСверху = 0;
		ЭтотОбъект[пИмя].ФиксацияСлева = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)

	Если НЕ ТипЗнч(Область.Расшифровка) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если Область.Расшифровка.РольЯчейки = "ЯчейкаСтрокиТаблицы" И Область.Текст = "<РезультатЗапроса>" Тогда

		СтандартнаяОбработка = Ложь;
		ИмяТабДокумента = Элемент.Имя;
		ИмяВыборки = Область.Расшифровка.Значение;

		ПараметрыОткрытия = Новый Структура;

		ПараметрыОткрытия.Вставить("ПутьКРезультатуЗапроса", Новый Структура("ИмяТабДокумента,ИмяВыборки", ИмяТабДокумента, ИмяВыборки));
		ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

		ОткрытьФормуАвтоматически("ФормаТаблицаЗначений", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;

	Если Область.Расшифровка.РольЯчейки = "ЯчейкаСтрокиТаблицы" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Область.Расшифровка.Значение) Тогда
			ПоказатьЗначение(, Область.Расшифровка.Значение);
			Состояние("Выполняется открытие элемента.",, "" + Область.Расшифровка.Значение);
		ИначеЕсли Лев(Область.Текст, 15) = "<Пустая ссылка:" Тогда
			ПоказатьЗначение(, Область.Текст);
		Иначе
			ПоказатьЗначение(, Область.Расшифровка.Значение);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если Область.Расшифровка.РольЯчейки = "ШапкаТаблицы" Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	Если Область.Расшифровка.РольЯчейки = "ЗаголовокТаблицы" Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанныеДерева = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);

		Если ТекДанныеДерева.ИД <> Область.Расшифровка.ИД Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отмена поиска текста пакета, т.к.в консоли выбрана другая ветка запроса.");
			Возврат;
		КонецЕсли;

		ТекстРедактора = ТекДанныеДерева.Текст;
		Позиция = СтрНайти(ТекстРедактора, Область.Примечание.Текст);
		Если Позиция > 0 Тогда
			Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Позиция, Позиция + СтрДлина(Область.Примечание.Текст));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Фрагмент текста запроса в текстовом редакторе не найден.
			|Возможно текст запроса изменён.");
		КонецЕсли;
		ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦветФона(Команда)

	Диалог = Новый ДиалогВыбораЦвета;

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Если Диалог.Выбрать() Тогда
		|	ЦветФонаЗавершение(Диалог.Цвет, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ЦветФонаЗавершение"", ЭтотОбъект);
		|Диалог.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЦветФонаЗавершение(Значение, Параметры) Экспорт

	Если Значение <> Неопределено Тогда
		пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ТекОбл.ЦветФона = Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦветТекста(Команда)

	Диалог = Новый ДиалогВыбораЦвета;

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Если Диалог.Выбрать() Тогда
		|	ЦветТекстаЗавершение(Диалог.Цвет, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ЦветТекстаЗавершение"", ЭтотОбъект);
		|Диалог.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаЗавершение(Значение, Параметры) Экспорт

	Если Значение <> Неопределено Тогда
		пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ТекОбл.ЦветТекста = Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦветГраницы(Команда)

	Диалог = Новый ДиалогВыбораЦвета;

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Если Диалог.Выбрать() Тогда
		|	ЦветГраницыЗавершение(Диалог.Цвет, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ЦветГраницыЗавершение"", ЭтотОбъект);
		|Диалог.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЦветГраницыЗавершение(Значение, Параметры) Экспорт

	Если Значение <> Неопределено Тогда
		пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
		ТекОбл = Элементы[пИмя].ТекущаяОбласть;
		ТекОбл.ЦветРамки = Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискНазад(Команда)

	ПоискВТабДоке(ЭтотОбъект.ТекстПоиска, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПоискДалее(Команда)

	ПоискВТабДоке(ЭтотОбъект.ТекстПоиска, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоискВТабДоке(Текст, НаправлениеВперед = Истина)

	Если Текст = "" Тогда
		Возврат;
	КонецЕсли;

	ИмяТабДок = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);

	Область = ЭтотОбъект[ИмяТабДок].НайтиТекст(Текст, Элементы[ИмяТабДок].ТекущаяОбласть, , , , НаправлениеВперед, Истина);
	Если НЕ ТипЗнч(Область)=Тип("Неопределено") Тогда
			Элементы[ИмяТабДок].ТекущаяОбласть = Область;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СТРАНИЦ

&НаКлиенте
Процедура СтраницыСРезультатамиПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ТекСтраница = Элементы.СтраницыСРезультатами.ТекущаяСтраница;
	Если ТекСтраница.Заголовок = НСтр("ru = 'Добавить'") Тогда
		ДобавитьСтраницуНаСервере();
	КонецЕсли;

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
	Элементы.РедактированиеТаблицы.Пометка = Элементы[пИмя].Редактирование;
	Элементы.ОтображениеЗаголовковТабличногоДокумента.Пометка = Элементы[пИмя].ОтображатьЗаголовки;

	СтрокиТабДокаЗафиксированы = НЕ(ЭтотОбъект[пИмя].ФиксацияСверху = 0 И ЭтотОбъект[пИмя].ФиксацияСлева = 0);
	Элементы.ФиксацияТабличногоДокумента.Пометка = СтрокиТабДокаЗафиксированы;

	Элементы.УдалитьСтраницу.Доступность = НЕ ТекСтраница.Имя = "Страница1";

	ПОДКЛЮЧАЕМЫЙ_РезультатПриАктивизацииОбласти(Элементы[пИмя]);

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере()

	СчетчикСтраниц = СчетчикСтраниц + 1;
	КолСтраниц = СчетчикСтраниц;

	НовыйЭлемент_Имя = "Результат" + Строка(КолСтраниц);
	НовыйЭлементСтраница_Имя = "Страница" + Строка(КолСтраниц);

	ДобавляемыеРеквизиты = Новый Массив;
	Реквизит = Новый РеквизитФормы(НовыйЭлемент_Имя, Новый ОписаниеТипов("ТабличныйДокумент"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	НовыйЭлементСтраница = ЭтотОбъект.Элементы.Вставить(НовыйЭлементСтраница_Имя, Тип("ГруппаФормы"), ЭтотОбъект.Элементы.СтраницыСРезультатами, Элементы.СтраницыСРезультатами.ПодчиненныеЭлементы.Добавить);
	НовыйЭлементСтраница.Вид = ВидГруппыФормы.Страница;
	НовыйЭлементСтраница.Заголовок = НовыйЭлементСтраница_Имя;

	НовыйЭлемент = ЭтотОбъект.Элементы.Добавить(НовыйЭлемент_Имя, Тип("ПолеФормы"), НовыйЭлементСтраница);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
	НовыйЭлемент.ПутьКДанным = НовыйЭлемент_Имя;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("Выбор", "РезультатВыбор");
	НовыйЭлемент.УстановитьДействие("ПриАктивизацииОбласти", "ПОДКЛЮЧАЕМЫЙ_РезультатПриАктивизацииОбласти");

	ЭтотОбъект.Элементы.СтраницыСРезультатами.ТекущаяСтраница = НовыйЭлементСтраница;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)

	ТекстВопроса = "Текущая страница будет безвозвратно удалена. Продолжить?";

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		|УдалитьСтраницуЗавершение(Результат, Неопределено);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""УдалитьСтраницуЗавершение"", ЭтотОбъект);
		|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьСтраницуСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуСервер()

	ТекСтраница = Элементы.СтраницыСРезультатами.ТекущаяСтраница;

	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекСтраницы = ТекСтраница.Имя;
	ИмяРеквизита = СтрЗаменить(ИмяТекСтраницы, "Страница", "Результат");

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);

	пХранилище.СтруктурыРезультатовЗапросовТабДоков.Удалить(ИмяРеквизита);

	Если ИмяТекСтраницы = "Страница1" Тогда
		Возврат;
	КонецЕсли;

	СтраницаКУдалению = Элементы.СтраницыСРезультатами.ТекущаяСтраница;
	СтраницаСлева = Элементы.СтраницыСРезультатами.ПодчиненныеЭлементы[Элементы.СтраницыСРезультатами.ПодчиненныеЭлементы.Индекс(СтраницаКУдалению) - 1];
	Элементы.СтраницыСРезультатами.ТекущаяСтраница = СтраницаСлева;

	Элементы.Удалить(СтраницаКУдалению);

	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);

	Элементы.УдалитьСтраницу.Доступность = НЕ СтраницаСлева.Имя = "Страница1";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ВТ

&НаКлиенте
Процедура ВТИмяПакетаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекДанныеВТ = ВТ.НайтиПоИдентификатору(Элементы.ВТ.ТекущаяСтрока);

	Адрес = ТекДанныеВТ.Адрес;

	// ++ открытие редактора с пустой ТЗ
	// -- открытие редактора с пустой ТЗ
	Если Адрес = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Таблица не выгружена!");
		Возврат;
	КонецЕсли;

	ПараметрыОткрытия = Новый Структура;

	ПараметрыОткрытия.Вставить("ПараметрАдрес", Адрес);
	ПараметрыОткрытия.Вставить("ИД", ТекДанныеВТ.ИД);
	ПараметрыОткрытия.Вставить("ОбъектПутьКХранилищу", Объект.ПутьКХранилищу);

	ОткрытьФормуАвтоматически("ФормаТаблицаЗначений", ПараметрыОткрытия, "ВТИмяПакетаОткрытиеЗавершение", Адрес);

КонецПроцедуры

&НаКлиенте
Процедура ВТИмяПакетаОткрытиеЗавершение(пПутьКХранилищу, Адрес) Экспорт

	Если НЕ пПутьКХранилищу = Неопределено Тогда

		УстановитьПараметрТЗНаСервере(Адрес, пПутьКХранилищу);

	КонецЕсли;

	ВТПриАктивизацииСтроки(Элементы.ВТ);

КонецПроцедуры

&НаКлиенте
Процедура ВТПоказатьПриИзменении(Элемент)

	ПриИзмененииФлагаВ_ВТСервер();

КонецПроцедуры

&НаКлиенте
Процедура ВТВыгрузитьПриИзменении(Элемент)

	ПриИзмененииФлагаВ_ВТСервер();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаВ_ВТСервер()

	ТекДанныеВТ = ВТ.НайтиПоИдентификатору(Элементы.ВТ.ТекущаяСтрока);
	Отбор = Новый Структура("ИД, ИмяПакета", ТекДанныеВТ.ИД, ТекДанныеВТ.ИмяПакета);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);

	// SG, вставка 05/06/15 >>>
	// пХранилище может быть неопределено
	Если НЕ ЭтоАдресВременногоХранилища(пХранилище)
		И НЕ ТипЗнч(пХранилище) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	// SG, вставка 05/06/15 <<<

	ТаблПарам = пХранилище.ТаблицаПакетов;
	ТекПакет = ТаблПарам.НайтиСтроки(Отбор)[0];
	ТекПакет.Показать = ТекДанныеВТ.Показать;
	ТекПакет.Выгрузить = ТекДанныеВТ.Выгрузить;
	пХранилище.Вставить("ТаблицаПакетов", ТаблПарам);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, ЭтотОбъект.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ВТПриАктивизацииСтроки(Элемент)

	пДоступность = Истина;

	ИД_ТекущейСтроки = Элементы.ВТ.ТекущаяСтрока;

	Если ИД_ТекущейСтроки = Неопределено Тогда
		пДоступность = Ложь;
	Иначе
		ТекСтрока = ВТ.НайтиПоИдентификатору(ИД_ТекущейСтроки);
		Если ТекСтрока = Неопределено Тогда
			пДоступность = Ложь;
		Иначе
			ТекСтрока = ВТ.НайтиПоИдентификатору(ИД_ТекущейСтроки);
			пДоступность = НЕ ПустаяСтрока(ТекСтрока.ТекстМодуля);
		КонецЕсли;
	КонецЕсли;

	Элементы.ВТВыполнитьКодМодуля.Доступность = пДоступность;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКодМодуля(Команда)

	ВыполнитьКодМодуляНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодМодуляНаСервере()

	ИД_ТекущейСтроки = Элементы.ВТ.ТекущаяСтрока;

	Если ИД_ТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекСтрока = ВТ.НайтиПоИдентификатору(ИД_ТекущейСтроки);

	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ТекСтрока.ТекстМодуля) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Текст модуля пуст!");
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ТекСтрока.Адрес) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Таблица не выгружена!");
		Возврат;
	КонецЕсли;

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);

	Результат = Неопределено;

	Если пХранилище.СтруктураТЗ.Свойство(ТекСтрока.Адрес, Результат) Тогда

		Выполнить(ТекСтрока.ТекстМодуля);

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ СОХРАНЕНИЯ И ОТКРЫТИЯ

&НаКлиенте
Процедура ОткрытьДеревоЗапросов(Команда)

	Перем ВыбранноеИмя;
	Перем АдресВременногоХранилища;

	ДопПараметры = Новый Структура("Добавление", Команда.Имя = "ДобавитьДеревоЗапросов");

	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|Если ПоместитьФайл(АдресВременногоХранилища, ВыбранноеИмя, ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		|	ОткрытьДеревоЗапросовЗавершение(Истина, АдресВременногоХранилища, , ДопПараметры);
		|КонецЕсли;";
	Иначе
		ТекстКода = "
		|Оповещение = Новый ОписаниеОповещения(""ОткрытьДеревоЗапросовЗавершение"", ЭтотОбъект, ДопПараметры);
		|НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ВыбранноеИмя, Истина, УникальныйИдентификатор);";
	КонецЕсли;

	Выполнить(ТекстКода);

КонецПроцедуры

&НаСервере
Процедура ОткрытьДеревоЗапросовЗавершение(Заглушка = Неопределено, АдресВременногоХранилища = Неопределено, ИмяФайла = Неопределено, Параметры = Неопределено) Экспорт

	ФайлВХранилище = НЕ АдресВременногоХранилища = Неопределено;
	ФайлНаДиске = НЕ ИмяФайла = Неопределено;

	Если ФайлВХранилище Тогда
		ПутьНаСервере = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ДвоичныеДанные.Записать(ПутьНаСервере);
	ИначеЕсли ФайлНаДиске Тогда
		ПутьНаСервере = ИмяФайла;
		пФайл = Новый Файл(ПутьНаСервере);
		Если НЕ пФайл.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указанный файл не найден!");
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Попытка
		ПолученноеЗначение = ЗначениеИзФайла(ПутьНаСервере);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении файла! Описание: " + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если ФайлВХранилище Тогда
		УдалитьФайлы(ПутьНаСервере);
	КонецЕсли;

	Если НЕ ТипЗнч(ПолученноеЗначение) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружаемый файл не является файлом дерева запросов!");
		Возврат;
	КонецЕсли;

	Если ПолученноеЗначение.ДеревоЗапросов.Строки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружаемый файл дерева запросов пуст!");
		Возврат;
	КонецЕсли;

	Об = РеквизитФормыВЗначение("Объект");
	СтруктураХранилища = Об.СоздатьСтруктуру();
	ОбновитьРеквизиты(ПолученноеЗначение, СтруктураХранилища);

	лДеревоЗапросов = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	Если Параметры.Добавление Тогда
		// перекодировать.
		МассивИД = Новый Массив;
		ПолучитьИД_ДереваЗапросов(лДеревоЗапросов, МассивИД);
		ЗаменитьИД(ПолученноеЗначение, МассивИД);
	Иначе
		лДеревоЗапросов.Строки.Очистить();
	КонецЕсли;
	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);

	ИД_ПервойСтроки = ПолученноеЗначение.ДеревоЗапросов.Строки[0].ИД;

	ВывестиДеревоВДерево(лДеревоЗапросов, ПолученноеЗначение.ДеревоЗапросов);

	Если Параметры.Добавление Тогда
		// ТабПараметров
		Для Каждого Строка Из ПолученноеЗначение.ТабПараметров Цикл
			НоваяСтрокаПараметра = пХранилище.ТабПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПараметра, Строка);
		КонецЦикла;
		// ТаблицаПакетов
		Для Каждого Строка Из ПолученноеЗначение.ТаблицаПакетов Цикл
			НоваяСтрокаПараметра = пХранилище.ТаблицаПакетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПараметра, Строка);
		КонецЦикла;
		// СтруктураТЗ
		Для Каждого ЭлементСтруктуры Из ПолученноеЗначение.СтруктураТЗ Цикл
			пХранилище.СтруктураТЗ.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	Иначе
		пХранилище.Вставить("ТабПараметров", ПолученноеЗначение.ТабПараметров);
		пХранилище.Вставить("ТаблицаПакетов", ПолученноеЗначение.ТаблицаПакетов);
		пХранилище.Вставить("СтруктураТЗ", ПолученноеЗначение.СтруктураТЗ);
	КонецЕсли;

	ТД = Неопределено;
	Если пХранилище.Свойство("ВнешнийРезультат", ТД) Тогда
		Результат1.Вывести(ТД);
	КонецЕсли;

	ЗначениеВДанныеФормы(лДеревоЗапросов, ДеревоЗапросов);

	ЭлементыДерева = ДеревоЗапросов.ПолучитьЭлементы();
	ИдентификаторСтроки = Неопределено;
	ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ИД", ИдентификаторСтроки, ЭлементыДерева, ИД_ПервойСтроки, Ложь);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ИдентификаторСтроки;

КонецПроцедуры

&НаСервере
Процедура ЗаменитьИД(ПолученноеЗначение, МассивИД)

	// ДеревоЗапросов
	НовыеИД = Новый Соответствие;
	ПолученноеЗначение.ДеревоЗапросов.Колонки.Добавить("ИД_", Новый ОписаниеТипов("Строка"));
	ОбойтиИДДереваЗапросовРекурсивно(ПолученноеЗначение.ДеревоЗапросов, НовыеИД, МассивИД);
	ПолученноеЗначение.ДеревоЗапросов.Колонки.Удалить("ИД");
	ПолученноеЗначение.ДеревоЗапросов.Колонки.ИД_.Имя = "ИД";

	Для Каждого Строка Из ПолученноеЗначение.ТабПараметров Цикл
		Строка.ИД = НовыеИД[Строка.ИД];
	КонецЦикла;

	Для Каждого Строка Из ПолученноеЗначение.ТаблицаПакетов Цикл
		Строка.ИД = НовыеИД[Строка.ИД];
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбойтиИДДереваЗапросовРекурсивно(Узел, НовыеИД, МассивИД)

	Для Каждого Ветка Из Узел.Строки Цикл
		НовыйИД = Лев(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""), 14);
		Пока НЕ МассивИД.Найти(НовыйИД) = Неопределено Цикл
			НовыйИД = Лев(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "_", ""), 14);
		КонецЦикла;
		МассивИД.Добавить(НовыйИД);
		НовыеИД.Вставить(Ветка.ИД, НовыйИД);
		Ветка.ИД_ = НовыйИД;
		ОбойтиИДДереваЗапросовРекурсивно(Ветка, НовыеИД, МассивИД);
	КонецЦикла;

КонецПроцедуры // ОбойтиИДДереваЗапросов()

Процедура ПолучитьИД_ДереваЗапросов(Узел, МассивИД)

	Для Каждого Ветка Из Узел.Строки Цикл
		МассивИД.Добавить(Ветка.ИД);
		ПолучитьИД_ДереваЗапросов(Ветка, МассивИД);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДеревоЗапросовНаСервереПриложения(Команда)

	ДопПараметры = Новый Структура("Добавление", Команда.Имя = "ДобавитьДеревоЗапросовНаСервереПриложения");

	Значение = Новый Структура("ПутьКФайлуНаСервереПриложения", Объект.ПутьКФайлуНаСервереПриложения);
	ОткрытьФормуАвтоматически("ФормаПутиКФайлуНаСервереПриложения", Значение, "ОткрытьДеревоЗапросовНаСервереПриложенияЗавершение", ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДеревоЗапросовНаСервереПриложенияЗавершение(Значение, ДопПараметры) Экспорт

	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект.ПутьКФайлуНаСервереПриложения = Значение.Путь;

	Если ПустаяСтрока(Значение.Путь) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ Значение.Прочитать Тогда
		Возврат;
	КонецЕсли;

	ОткрытьДеревоЗапросовЗавершение(, , Объект.ПутьКФайлуНаСервереПриложения, ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоследнееСохраненноеДеревоЗапросов(Команда)

	Перем ВыбранноеИмя;
	Перем АдресВременногоХранилища;

	НайденноеИмя=НайтиПоследнийФайлЗапросаНаСервере();
	Если ПустаяСтрока(НайденноеИмя) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл с запросом не найден!");
		Возврат;
	КонецЕсли;

	ОткрытьДеревоЗапросовЗавершение(,,НайденноеИмя,Новый Структура("Добавление",Команда.Имя="ДобавитьПоследнееСохраненноеДеревоЗапросов"));

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПоследнийФайлЗапросаНаСервере()

	Возврат ФайловыеФункцииСлужебный.НайтиПоследнийФайлЗапроса();

КонецФункции

&НаКлиенте
Процедура СохранитьДеревоЗапросовКак(Команда)

	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ПутьКФайлуЗапроса;
	Фильтр = НСтр("ru = '""Текст""'; en = '""Text""'")+"(*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения =
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	СохранитьДеревоЗапросовЗавершение(ДиалогОткрытияФайла.ПолноеИмяФайла, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранитьДеревоЗапросовЗавершение"", ЭтотОбъект, Неопределено);
		|ДиалогОткрытияФайла.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДеревоЗапросов(Команда)

	Если ПустаяСтрока(Объект.ПутьКФайлуЗапроса) Тогда
		СохранитьДеревоЗапросовКак(Неопределено);
		Возврат;
	КонецЕсли;

	СохранитьДеревоЗапросовЗавершение(Объект.ПутьКФайлуЗапроса, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВеткуЗапросовКак(Команда)

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана ветка дерева запросов!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ПутьКФайлуВеткиЗапроса;
	Фильтр = НСтр("ru = '""Текст""'; en = '""Text""'")+"(*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");

	лПараметры = Новый Структура("ИДВетки", ТекущиеДанные.ИД);

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения =
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	СохранитьДеревоЗапросовЗавершение(ДиалогОткрытияФайла.ПолноеИмяФайла, лПараметры);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранитьДеревоЗапросовЗавершение"", ЭтотОбъект, лПараметры);
		|ДиалогОткрытияФайла.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДеревоЗапросовЗавершение(Путь, лПараметры) Экспорт

	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		пПутьКФайлу = Путь;
	ИначеЕсли ТипЗнч(Путь) = Тип("Массив") Тогда
		пПутьКФайлу = Путь[0];
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в имени файла!");
		Возврат;
	КонецЕсли;

	ИДВетки = Неопределено;
	Если НЕ лПараметры = Неопределено И лПараметры.Свойство("ИДВетки", ИДВетки) Тогда
		Объект.ПутьКФайлуВеткиЗапроса = пПутьКФайлу;
	Иначе
		Объект.ПутьКФайлуЗапроса = пПутьКФайлу;
	КонецЕсли;
	Элементы.ДеревоЗапросовСохранитьДеревоЗапросов.Доступность = НЕ ПустаяСтрока(пПутьКФайлу);

	НовыйЗаголовок = Лев(Заголовок, СтрНайти(Заголовок, ". Файл: ") + 7);
	Заголовок = НовыйЗаголовок + ?(ПустаяСтрока(Объект.ПутьКФайлуЗапроса), "Не сохранен", Объект.ПутьКФайлуЗапроса) + ".";

	Адрес = ПолучитьФайлНаСервере(лПараметры);
	Описание = Новый ОписаниеПередаваемогоФайла(пПутьКФайлу, Адрес);
	МассивОписаний = Новый Массив;
	МассивОписаний.Добавить(Описание);

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|ПолучитьФайлы(МассивОписаний, , , Ложь);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранениеФайлаНаДиск"", ЭтотОбъект, Неопределено);
		|НачатьПолучениеФайлов(Оповещение, МассивОписаний, , Ложь);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаСервере
Функция ПолучитьФайлНаСервере(лПараметры = Неопределено)

	ИДВетки = Неопределено;
	Если НЕ лПараметры = Неопределено И лПараметры.Свойство("ИДВетки", ИДВетки) Тогда

	КонецЕсли;

	_ДеревоЗапросов = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));

	Если НЕ ИДВетки = Неопределено Тогда
		лДеревоЗапросов = _ДеревоЗапросов.Скопировать();
		лДеревоЗапросов.Строки.Очистить();
		СохраняемаяСтрока = _ДеревоЗапросов.Строки.Найти(ИДВетки, "ИД", Истина);
		ДобавитьСтрокуВДеревоЗначений(лДеревоЗапросов, СохраняемаяСтрока);
	Иначе
		лДеревоЗапросов = _ДеревоЗапросов;
	КонецЕсли;

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	пХранилище.Вставить("ДеревоЗапросов", лДеревоЗапросов);

	ПутьНаСервере = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ПутьНаСервере, пХранилище);

	Двоичное = Новый ДвоичныеДанные(ПутьНаСервере);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	УдалитьФайлы(ПутьНаСервере);
	Возврат Адрес;

КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВДеревоЗначений(Приемник, ДобавляемаяСтрока)

	НовыйУзел = Приемник.Строки.Добавить();

	ЗаполнитьЗначенияСвойств(НовыйУзел, ДобавляемаяСтрока);

	Для Каждого Ветка Из ДобавляемаяСтрока.Строки Цикл

		ДобавитьСтрокуВДеревоЗначений(НовыйУзел, Ветка);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СохранениеФайлаНаДиск(ПолученныеФайлы, Параметры) Экспорт
	// Не удалять!
КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоВДерево(Приемник, Источник)

	Для Каждого Строка Из Источник.Строки Цикл
		НоваяВетка = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяВетка, Строка);
		ВывестиДеревоВДерево(НоваяВетка, Строка);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ОРАБОТЧИКИ ПРОВЕРКИ ЗАПРОСА И ОТОБРАЖЕНИЯ

&НаСервере
Процедура ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные(ПроверитьЗапрос = Истина, ПолучитьПараметры = Истина, ОбновитьДанные = Истина)

	ИдСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока;

	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(ИдСтроки);

	Если НЕ ТекущаяСтрока = Неопределено Тогда

		ТекстЗапроса = ТекущаяСтрока.Текст;

		Если ПроверитьЗапрос Тогда
			ТекстЗапросаСОшибками(ТекстЗапроса);
		КонецЕсли;

	КонецЕсли;

	Если ПолучитьПараметры Тогда
		ПолучитьПараметрыИзЗапроса(ТекстЗапроса, ТекущаяСтрока.ИД);
	КонецЕсли;

	Если ОбновитьДанные Тогда
		ОтобразитьПараметрыНаФорме(ТекущаяСтрока.ИД);
	КонецЕсли;

	Если Объект.ОшибкиВЗапросе Тогда
		Элементы.ДеревоЗапросовТекст.ЦветТекста = WebЦвета.Красный;
		Элементы.КомментарийКТекстуЗапроса.Видимость = Истина;
	Иначе
		Элементы.ДеревоЗапросовТекст.ЦветТекста = WebЦвета.Черный;
		Элементы.КомментарийКТекстуЗапроса.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТекстЗапросаСОшибками(ТекстЗапроса)

	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Объект.ОшибкиВЗапросе = Ложь;
	Иначе
		Попытка
			Запрос = Новый Запрос(ТекстЗапроса);
			ПараметрыЗапроса = Запрос.НайтиПараметры();
			Объект.ОшибкиВЗапросе = Ложь;
			КомментарийКТекстуЗапроса = "";
		Исключение
			Информация = ИнформацияОбОшибке();
			ТекстОшибки = Информация.Причина.Описание;
			КомментарийКТекстуЗапроса = ТекстОшибки;
			Объект.ОшибкиВЗапросе = Истина;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыИзЗапроса(ТекстЗапроса, ИД)

	Если Объект.ОшибкиВЗапросе Тогда
		Возврат;
	КонецЕсли;

	Об = РеквизитФормыВЗначение("Объект");
	Об.ПолучитьПараметрыЗапроса(ТекстЗапроса, ИД);
	ЗначениеВРеквизитФормы(Об, "Объект");

КонецПроцедуры

&НаСервере
Процедура ОтобразитьПараметрыНаФорме(ИД)

	Если Объект.ОшибкиВЗапросе Тогда
		Возврат;
	КонецЕсли;

	ЭтотОбъект.ПараметрыТЗ.Очистить();
	ЭтотОбъект.ВТ.Очистить();

	Если НЕ ИД="" Тогда

		пХранилище=ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);

		Для Каждого Строка Из пХранилище.ТабПараметров.НайтиСтроки(Новый Структура("ИД",ИД)) Цикл

			НоваяСтрока=ЭтотОбъект.ПараметрыТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);

			Если ТипЗнч(Строка.Значение)=Тип("ТаблицаЗначений") Тогда
				НоваяСтрока.Значение = "ТаблицаЗначений";
			ИначеЕсли ТипЗнч(Строка.Значение)=Тип("Граница") Тогда
				НоваяСтрока.Значение=Строка(Строка.Значение.ВидГраницы)+";"+Строка(Строка.Значение.Значение);
			ИначеЕсли ТипЗнч(Строка.Значение)=Тип("Null") Тогда
				НоваяСтрока.Значение="Null";
			ИначеЕсли ТипЗнч(Строка.Значение)=Тип("Неопределено") Тогда
				НоваяСтрока.Значение="Неопределено";
			Иначе
				НоваяСтрока.Значение=Строка.Значение;
			КонецЕсли;

		КонецЦикла;

		Для Каждого Строка Из пХранилище.ТаблицаПакетов.НайтиСтроки(Новый Структура("ИД",ИД)) Цикл
			ЗаполнитьЗначенияСвойств(ЭтотОбъект.ВТ.Добавить(),Строка);
		КонецЦикла;

	КонецЕсли;

	Если ЭтотОбъект.ПараметрыТЗ.Количество()<>0 Тогда
		ЭтотОбъект.Элементы.ПараметрыТЗ.ТекущаяСтрока=ЭтотОбъект.ПараметрыТЗ[0].ПолучитьИдентификатор();
	КонецЕсли;
	Если ЭтотОбъект.ВТ.Количество()<>0 Тогда
		ЭтотОбъект.Элементы.ВТ.ТекущаяСтрока=ЭтотОбъект.ВТ[0].ПолучитьИдентификатор();
	КонецЕсли;

	ТекДанныеДерева=Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПараметры(Команда)

	Элементы.Параметры.Видимость = НЕ Элементы.Параметры.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьТекстЗапроса(Команда)

	Элементы.ТекстЗапроса.Видимость = НЕ Элементы.ТекстЗапроса.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьРезультат(Команда)

	Элементы.ГруппаРезультат.Видимость = НЕ Элементы.ГруппаРезультат.Видимость;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ОРАБОТЧИКИ

&НаКлиенте
Процедура КомментарийКТекстуЗапросаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗакрывающаяСкоба = СтрНайти(КомментарийКТекстуЗапроса, "}");
	Если ЗакрывающаяСкоба = 0 Тогда
		Возврат;
	КонецЕсли;

	ДлинаСтроки = 0;

	ПозицияВопроса = СтрНайти(КомментарийКТекстуЗапроса, "<<?>>") + СтрДлина("<<?>>");
	Если ПозицияВопроса > 0 Тогда

		ДлинаСтроки = СтрДлина(Сред(КомментарийКТекстуЗапроса, ПозицияВопроса));

	КонецЕсли;

	Координаты = Лев(КомментарийКТекстуЗапроса, ЗакрывающаяСкоба);
	Координаты = СтрЗаменить(Координаты, "{(", "");
	Координаты = СтрЗаменить(Координаты, ")}", "");
	Координаты = СтрЗаменить(Координаты, " ", "");
	МассивКоординат = РазбитьСтрокуВМассивПодстрок(Координаты, ",");
	Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(Число(МассивКоординат[0]), Число(МассивКоординат[1]), Число(МассивКоординат[0]), Число(МассивКоординат[1]) + ДлинаСтроки);
	ЭтотОбъект.ТекущийЭлемент = Элементы.ДеревоЗапросовТекст;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск) Экспорт

	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл

		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;

		Если СтрокаДерева[ИмяПоля] = КлючСтроки Тогда

			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();

			ПрекратитьПоиск = Истина;

			Возврат;

		КонецЕсли;

		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();

		Если КоллекцияЭлементов.Количество() > 0 Тогда

			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИмяПоля, ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьИмяОбработки()

	Возврат РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();

КонецФункции

&НаСервере
Процедура УстановитьПараметрТЗНаСервере(Адрес, ПутьКХранилищу)

	// ++ открытие редактора с пустой ТЗ
	Если ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	// -- открытие редактора с пустой ТЗ

	ТЗ = ПолучитьИзВременногоХранилища(ПутьКХранилищу);

	пХранилище = ПолучитьИзВременногоХранилища(Объект.ПутьКХранилищу);
	СтруктураТЗ = пХранилище.СтруктураТЗ;

	Отбор = Новый Структура("Адрес", Адрес);
	МассивСтрок = пХранилище.ТаблицаПакетов.НайтиСтроки(Отбор);

	Если МассивСтрок.Количество() > 0 Тогда
		ТекущаяСтрока = Элементы.ВТ.ТекущаяСтрока;
		ТекДанные = ВТ.НайтиПоИдентификатору(ТекущаяСтрока);
		ТекДанные.ТекстМодуля = МассивСтрок[0].ТекстМодуля;

	КонецЕсли;

	СтруктураТЗ.Вставить(Адрес, ТЗ);
	пХранилище.Вставить("СтруктураТЗ", СтруктураТЗ);
	Объект.ПутьКХранилищу = ПоместитьВоВременноеХранилище(пХранилище, пХранилище.УникальныйИдентификаторФормы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТекущегоТабДокаНаСервере(Элементы)

	Возврат СтрЗаменить(Элементы.СтраницыСРезультатами.ТекущаяСтраница.Имя, "Страница", "Результат");

КонецФункции

&НаКлиенте
Процедура Инфо(Команда)

	СписокМеню = Новый СписокЗначений;
	СписокМеню.Добавить("http://infostart.ru/public/335504/","Домашняя страница консоли", ,БиблиотекаКартинок.ГеографическаяСхема);
	СписокМеню.Добавить("http://infostart.ru/profile/235281/public/","Все публикации автора", ,БиблиотекаКартинок.ГеографическаяСхема);

	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|ТекСсылка = ВыбратьИзМеню(СписокМеню, Элементы.Инфо);
		|ИнфоЗавершение(ТекСсылка, Неопределено);";
	Иначе
		ТекстКода = "
		|Оповещение = Новый ОписаниеОповещения(""ИнфоЗавершение"", ЭтотОбъект, Неопределено);
		|ПоказатьВыборИзМеню(Оповещение, СписокМеню, Элементы.Инфо);";
	КонецЕсли;

	Выполнить(ТекстКода);

КонецПроцедуры

&НаКлиенте
Процедура ИнфоЗавершение(Значение, Параметры) Экспорт

	Если Значение <> Неопределено Тогда
		Если Объект.МодальностьРазрешена Тогда
			ТекстКода = "
			|ЗапуститьПриложение(Значение.Значение);";
		Иначе
			ТекстКода = "
			|Оповещение = Новый ОписаниеОповещения(""ИнфоЗавершениеФинал"", ЭтотОбъект, Неопределено);
			|НачатьЗапускПриложения(Оповещение, Значение.Значение);";
		КонецЕсли;
	КонецЕсли;

	Выполнить(ТекстКода);

КонецПроцедуры

&НаКлиенте
Процедура ИнфоЗавершениеФинал(Значение, Параметры) Экспорт

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПредопределенноеЗначение(Команда)

	ПараметрыОткрытия = Новый Структура("НС, НК, КС, КК");
	Элементы.ДеревоЗапросовТекст.ПолучитьГраницыВыделения(ПараметрыОткрытия.НС, ПараметрыОткрытия.НК, ПараметрыОткрытия.КС, ПараметрыОткрытия.КК);

	// ++
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыделенныйТекст", Элементы.ДеревоЗапросовТекст.ВыделенныйТекст);
	// --
	ОткрытьФормуАвтоматически("ФормаВыбораПредопределенныхЭлементов", ПараметрыФормы, "ВставитьТекстЗавершение", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстЗавершение(Значение, ПараметрыОткрытия) Экспорт

	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ДеревоЗапросовТекст.УстановитьГраницыВыделения(ПараметрыОткрытия.НС, ПараметрыОткрытия.НК, ПараметрыОткрытия.КС, ПараметрыОткрытия.КК);
	Элементы.ДеревоЗапросовТекст.ВыделенныйТекст = Значение;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТабличныйДокумент(Команда)

	ТекСтраница = Элементы.СтраницыСРезультатами.ТекущаяСтраница;
	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = '""Excel""'; en = '""Excel""'")+"(*.xlsx)|*.xlsx";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения =
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	СохранитьТабличныйДокументЗавершение(ДиалогОткрытияФайла.ПолноеИмяФайла, ТекСтраница);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранитьТабличныйДокументЗавершение"", ЭтотОбъект, ТекСтраница);
		|ДиалогОткрытияФайла.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТабличныйДокументЗавершение(Путь, ТекСтраница) Экспорт

	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		пПутьКФайлу = Путь;
	ИначеЕсли ТипЗнч(Путь) = Тип("Массив") Тогда
		пПутьКФайлу = Путь[0];
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в имени файла!");
		Возврат;
	КонецЕсли;

	ИмяТекСтраницы = ТекСтраница.Имя;
	ИмяРеквизита = СтрЗаменить(ИмяТекСтраницы, "Страница", "Результат");
	ТабДок = ЭтотОбъект[ИмяРеквизита];

	ТабДокДляСохранения = Новый ТабличныйДокумент;

	ВывестиТабДок(ТабДокДляСохранения, ТабДок);

	Строк = ТабДокДляСохранения.ВысотаТаблицы;
	Колонок = ТабДокДляСохранения.ШиринаТаблицы;

	Для счСтрока = 1 По Строк Цикл
		Для счКол = 1 По Колонок Цикл
			тОбл = ТабДокДляСохранения.Область(счСтрока, счКол);
			пТекст = тОбл.Примечание.Текст;
			Если НЕ ПустаяСтрока(пТекст) Тогда
				тОбл.Примечание.Текст = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТабДокДляСохранения.Записать(пПутьКФайлу, ТипФайлаТабличногоДокумента.XLSX);
	ТабДокДляСохранения = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ВывестиТабДок(Приемник, Источник)

		Приемник.Вывести(Источник);

КонецПроцедуры // ВывестиТабДок()

&НаКлиенте
Процедура ОткрытьРедакторТаблицЗначений(Команда)

	ОткрытьФормуАвтоматически("ФормаТаблицаЗначений");

КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформлениеФормы()

	Элементы.ПараметрыИспользуется.Видимость = Ложь;

	ЭлементыУО = УсловноеОформление.Элементы;

	НовыйЭлементУО = ЭлементыУО.Добавить();

	НовыйЭлементОтбораУО = НовыйЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбораУО.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ПараметрыТЗ.Используется");
	НовыйЭлементОтбораУО.ПравоеЗначение		= Ложь;
	НовыйЭлементОтбораУО.Использование		= Истина;

	НовоеПолеУО = НовыйЭлементУО.Поля.Элементы.Добавить();
	НовоеПолеУО.Использование	= Истина;
	НовоеПолеУО.Поле			= Новый ПолеКомпоновкиДанных("ПараметрыТЗ");

	НовыйЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт( , , , , , Истина));

КонецПроцедуры // ОбновитьУсловноеОформлениеФормы

&НаКлиенте
Процедура ПОДКЛЮЧАЕМЫЙ_РезультатПриАктивизацииОбласти(Элемент)

	РезультатПриАктивизацииОбласти(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
	ПолеТабличногоДокумента = ЭтотОбъект[пИмя];

	Сумма = 0;
	Количество = 0;
	Максимальное = 0;
	Минимальное = 0;
	АдресаЯчеек = Новый Структура;

	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл

		Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") ИЛИ Область = Неопределено Тогда // ОбластьЯчеекТабличногоДокумента
			Продолжить;
		КонецЕсли;

		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Таблица Тогда
			Продолжить;
		ИначеЕсли Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			СуммироватьЗначения(Область.Верх, Область.Низ, Область.Лево, Область.Право, Сумма, Количество, Максимальное, Минимальное, АдресаЯчеек, ПолеТабличногоДокумента);
		ИначеЕсли Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СуммироватьЗначения(Область.Верх, Область.Низ, 1, ПолеТабличногоДокумента.ШиринаТаблицы, Сумма, Количество, Максимальное, Минимальное, АдресаЯчеек, ПолеТабличногоДокумента);
		ИначеЕсли Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			СуммироватьЗначения(1, ПолеТабличногоДокумента.ВысотаТаблицы, Область.Лево, Область.Право, Сумма, Количество, Максимальное, Минимальное, АдресаЯчеек, ПолеТабличногоДокумента);
		КонецЕсли;

	КонецЦикла;

	СуммаЯчеек = Сумма;
	СуммаЯчеекПодробно = "Сумма: " + Строка (Сумма)
						+ "; Кол: " + Строка(Количество)
						+ "; Мин: " + Строка(Минимальное)
						+ "; Макс: " + Строка(Максимальное)
						+ ?(Количество = 0, "","; Ср.: " + Строка (Сумма / Количество));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СуммироватьЗначения(Верх, Низ, Лево, Право, Сумма, Количество, Максимальное, Минимальное, АдресаЯчеек, ПолеТабличногоДокумента)

	ТипЧисло = Тип("Число");

	Для ИндСтр = Верх По Низ Цикл
		Для ИндКол = Лево По Право Цикл

			ИмяОбласти = "R" + Формат(ИндСтр, "ЧГ=0") + "C" + Формат(ИндКол, "ЧГ=0");
			Если АдресаЯчеек.Свойство(ИмяОбласти) Тогда
				Продолжить;
			Иначе
				АдресаЯчеек.Вставить(ИмяОбласти);
			КонецЕсли;

			РасшифровкаЯчейки = ПолеТабличногоДокумента.Область(ИмяОбласти).Расшифровка;
			ЗначениеЯчейки = Неопределено;

			Если ТипЗнч(РасшифровкаЯчейки) <> Тип("Структура") Тогда
				Продолжить;
			ИначеЕсли НЕ РасшифровкаЯчейки.Свойство("Значение", ЗначениеЯчейки) Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЯчейки = РасшифровкаЯчейки.Значение;

			Если ТипЗнч(ЗначениеЯчейки) = ТипЧисло Тогда
				Сумма = Сумма + ЗначениеЯчейки;
				Количество = Количество + 1;

				Если Максимальное = 0 Тогда
					Максимальное = ЗначениеЯчейки;
				ИначеЕсли Максимальное < ЗначениеЯчейки Тогда
					Максимальное = ЗначениеЯчейки;
				КонецЕсли;

				Если Минимальное = 0 Тогда
					Минимальное = ЗначениеЯчейки;
				ИначеЕсли Минимальное > ЗначениеЯчейки Тогда
					Минимальное = ЗначениеЯчейки;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СуммаЯчеекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = СуммаЯчеекПодробно;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатВОтдельныйТабличныйДокумент(Команда)
	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Результат", ЭтотОбъект[пИмя]);
	ДопПараметры.Вставить("ПутьКХранилищу", Объект.ПутьКХранилищу);
	ДопПараметры.Вставить("ИмяТабДокумента", пИмя);
	ОткрытьФорму(ПолучитьИмяОбработки() + ".Форма.ФормаРедакторТабличногоДокумента", ДопПараметры, , Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьТекущуюОбласть(Команда)

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
	ПолеТабличногоДокумента = ЭтотОбъект[пИмя];

	Если НЕ ЯчейкаЗаполнена(ПолеТабличногоДокумента.ТекущаяОбласть) Тогда
		ПоказатьПредупреждение(, "Активная ячейка выделения должна быть в таблице!");
		Возврат;
	КонецЕсли;

	тВерх = ПолеТабличногоДокумента.ТекущаяОбласть.Верх;
	тНиз	= ПолеТабличногоДокумента.ТекущаяОбласть.Низ;
	тЛево = ПолеТабличногоДокумента.ТекущаяОбласть.Лево;
	тПраво = ПолеТабличногоДокумента.ТекущаяОбласть.Право;

	ОбойтиСлева = тЛево > 1;
	ОбойтиСверху = тВерх > 1;
	ОбойтиСнизу = Истина;
	ОбойтиСправа = Истина;

	Пока Истина Цикл

		Если ОбойтиСлева Тогда
			тКол = тЛево - 1;
			ЕстьЗначения = Ложь;
			Для тСтр = тВерх По тНиз Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тЛево = тЛево - ?(ЕстьЗначения, 1, 0);
			ОбойтиСлева = тЛево > 1 И ЕстьЗначения;
		КонецЕсли;

		Если ОбойтиСверху Тогда
			тСтр = тВерх - 1;
			ЕстьЗначения = Ложь;
			Для тКол = тЛево По тПраво Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тВерх = тВерх - ?(ЕстьЗначения, 1, 0);
			ОбойтиСверху = тВерх > 1 И ЕстьЗначения;
		КонецЕсли;

		Если ОбойтиСправа Тогда
			тКол = тПраво + 1;
			ЕстьЗначения = Ложь;
			Для тСтр = тВерх По тНиз Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тПраво = тПраво + ?(ЕстьЗначения, 1, 0);
			ОбойтиСправа = ЕстьЗначения;
		КонецЕсли;

		Если ОбойтиСнизу Тогда
			тСтр = тНиз + 1;
			ЕстьЗначения = Ложь;
			Для тКол = тЛево По тПраво Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тНиз = тНиз + ?(ЕстьЗначения, 1, 0);
			ОбойтиСнизу = ЕстьЗначения;
		КонецЕсли;

		Если НЕ ОбойтиСверху И НЕ ОбойтиСнизу И НЕ ОбойтиСлева И НЕ ОбойтиСправа Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Элементы[пИмя].ТекущаяОбласть = ПолеТабличногоДокумента.Область(тВерх, тЛево, тНиз, тПраво);

КонецПроцедуры

&НаКлиенте
Функция ЯчейкаЗаполнена(тОбл)

	Возврат ТипЗнч(тОбл.Расшифровка) = Тип("Структура") И (тОбл.Расшифровка.РольЯчейки = "ЯчейкаСтрокиТаблицы" ИЛИ тОбл.Расшифровка.РольЯчейки = "ШапкаТаблицы");

КонецФункции

&НаКлиенте
Процедура ВыделитьТекущуюКолонку(Команда)

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
	ПолеТабличногоДокумента = ЭтотОбъект[пИмя];

	Если НЕ ЯчейкаЗаполнена(ПолеТабличногоДокумента.ТекущаяОбласть) Тогда
		ПоказатьПредупреждение(, "Активная ячейка выделения должна быть в таблице!");
		Возврат;
	КонецЕсли;

	МинВерх = 0;
	МаксНиз = 0;
	МаксПраво = 0;
	МинЛево = 0;

	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл

		Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если МинВерх = 0 Тогда
			МинВерх = Область.Верх;
		Иначе
			МинВерх = Мин(МинВерх, Область.Верх);
		КонецЕсли;

		Если МаксНиз = 0 Тогда
			МаксНиз = Область.Низ;
		Иначе
			МаксНиз = Макс(МаксНиз, Область.Низ);
		КонецЕсли;

		Если МаксПраво = 0 Тогда
			МаксПраво = Область.Право;
		Иначе
			МаксПраво = Макс(МаксПраво, Область.Право);
		КонецЕсли;

		Если МинЛево = 0 Тогда
			МинЛево = Область.Лево;
		Иначе
			МинЛево = Мин(МинЛево, Область.Лево);
		КонецЕсли;

	КонецЦикла;

	тВерх = Мин(ПолеТабличногоДокумента.ТекущаяОбласть.Верх , МинВерх);
	тНиз	= Макс(ПолеТабличногоДокумента.ТекущаяОбласть.Низ , МаксНиз);
	тЛево = Мин(ПолеТабличногоДокумента.ТекущаяОбласть.Лево , МинЛево);
	тПраво = Макс(ПолеТабличногоДокумента.ТекущаяОбласть.Право, МаксПраво);

	ОбойтиСверху = тВерх > 1;
	ОбойтиСнизу = Истина;

	Пока Истина Цикл

		Если ОбойтиСверху Тогда
			тСтр = тВерх - 1;
			ЕстьЗначения = Ложь;
			Для тКол = тЛево По тПраво Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тВерх = тВерх - ?(ЕстьЗначения, 1, 0);
			ОбойтиСверху = тВерх > 1 И ЕстьЗначения;
		КонецЕсли;

		Если ОбойтиСнизу Тогда
			тСтр = тНиз + 1;
			ЕстьЗначения = Ложь;
			Для тКол = тЛево По тПраво Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тНиз = тНиз + ?(ЕстьЗначения, 1, 0);
			ОбойтиСнизу = ЕстьЗначения;
		КонецЕсли;

		Если НЕ ОбойтиСверху И НЕ ОбойтиСнизу Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Элементы[пИмя].ТекущаяОбласть = ПолеТабличногоДокумента.Область(тВерх, МинЛево, тНиз, МаксПраво);

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьТекущуюСтроку(Команда)

	пИмя = ПолучитьИмяТекущегоТабДокаНаСервере(Элементы);
	ПолеТабличногоДокумента = ЭтотОбъект[пИмя];

	Если НЕ ЯчейкаЗаполнена(ПолеТабличногоДокумента.ТекущаяОбласть) Тогда
		ПоказатьПредупреждение(, "Активная ячейка выделения должна быть в таблице!");
		Возврат;
	КонецЕсли;

	МинВерх = 0;
	МаксНиз = 0;
	МаксПраво = 0;
	МинЛево = 0;

	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл

		Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если МинВерх = 0 Тогда
			МинВерх = Область.Верх;
		Иначе
			МинВерх = Мин(МинВерх, Область.Верх);
		КонецЕсли;

		Если МаксНиз = 0 Тогда
			МаксНиз = Область.Низ;
		Иначе
			МаксНиз = Макс(МаксНиз, Область.Низ);
		КонецЕсли;

		Если МаксПраво = 0 Тогда
			МаксПраво = Область.Право;
		Иначе
			МаксПраво = Макс(МаксПраво, Область.Право);
		КонецЕсли;

		Если МинЛево = 0 Тогда
			МинЛево = Область.Лево;
		Иначе
			МинЛево = Мин(МинЛево, Область.Лево);
		КонецЕсли;

	КонецЦикла;

	тВерх = Мин(ПолеТабличногоДокумента.ТекущаяОбласть.Верх , МинВерх);
	тНиз	= Макс(ПолеТабличногоДокумента.ТекущаяОбласть.Низ , МаксНиз);
	тЛево = Мин(ПолеТабличногоДокумента.ТекущаяОбласть.Лево , МинЛево);
	тПраво = Макс(ПолеТабличногоДокумента.ТекущаяОбласть.Право, МаксПраво);

	ОбойтиСлева = тЛево > 1;
	ОбойтиСправа = Истина;

	Пока Истина Цикл

		Если ОбойтиСлева Тогда
			тКол = тЛево - 1;
			ЕстьЗначения = Ложь;
			Для тСтр = тВерх По тНиз Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тЛево = тЛево - ?(ЕстьЗначения, 1, 0);
			ОбойтиСлева = тЛево > 1 И ЕстьЗначения;
		КонецЕсли;

		Если ОбойтиСправа Тогда
			тКол = тПраво + 1;
			ЕстьЗначения = Ложь;
			Для тСтр = тВерх По тНиз Цикл
				тОбл = ПолеТабличногоДокумента.Область(тСтр, тКол);
				Если ЯчейкаЗаполнена(тОбл) Тогда
					ЕстьЗначения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тПраво = тПраво + ?(ЕстьЗначения, 1, 0);
			ОбойтиСправа = ЕстьЗначения;
		КонецЕсли;

		Если НЕ ОбойтиСлева И НЕ ОбойтиСправа Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Элементы[пИмя].ТекущаяОбласть = ПолеТабличногоДокумента.Область(МинВерх, тЛево, МаксНиз, тПраво);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторТабличногоДокумента(Команда)
	ДопПараметры = Новый Структура;
	ОткрытьФорму(ПолучитьИмяОбработки()+".Форма.ФормаРедакторТабличногоДокумента", ДопПараметры, , Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВТВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ВТИмяПакета" Тогда

		СтандартнаяОбработка = Ложь;
		ВТИмяПакетаОткрытие(Неопределено, Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВызовКонсолиВОтладчике(Команда)
	ОткрытьФорму(ПолучитьИмяОбработки() + ".Форма.ФормаВызовКонсолиЗапросовИзОтладчика");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Результат, СтрокиПараметров) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Значения = Неопределено;

	Для Каждого ЭлементПараметр Из СтрокиПараметров Цикл

		Если Результат.КоллекцияПараметров.Свойство(ЭлементПараметр.Название, Значения) Тогда

			Если Значения.С Тогда
				ЭлементПараметр.Значение = Результат.НачалоПериода;
				ЭлементПараметр.Свойство = "С";
			ИначеЕсли Значения.По Тогда
				ЭлементПараметр.Значение = Результат.КонецПериода;
				ЭлементПараметр.Свойство = "По";
			Иначе
				ЭлементПараметр.Свойство = "";
			КонецЕсли;

			ПараметрыЗначениеПриИзмененииСервер(ЭлементПараметр.ПолучитьИдентификатор());

		КонецЕсли;

	КонецЦикла;

	Если Результат.ВыполнитьЗапрос Тогда

		ВыполнитьЗапрос(Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)

	ТипДатаВремя = Новый ОписаниеТипов("Дата");

	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокиПараметров = ПараметрыТЗ.НайтиСтроки(Новый Структура("ИД", ТекущиеДанные.ИД));

	МассивСтруктур = Новый Массив;

	НачалоПериода = Дата(1, 1, 1);
	КонецПериода = Дата(1, 1, 1);

	СписокДат = Новый СписокЗначений;

	Для Каждого Строка Из СтрокиПараметров Цикл

		Если НЕ Строка.Используется ИЛИ Строка.Вычисляемый ИЛИ НЕ ТипДатаВремя.СодержитТип(ТипЗнч(Строка.Значение)) Тогда
			Продолжить;
		КонецЕсли;

		МассивСтруктур.Добавить(Новый Структура("Параметр, С, По", Строка.Название, Строка.Свойство = "С", Строка.Свойство = "По"));
		СписокДат.Добавить(Строка.Значение);

	КонецЦикла;

	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	КоличествоДат = СписокДат.Количество();
	Если КоличествоДат > 0 Тогда
		НачалоПериода = СписокДат[0].Значение;
		КонецПериода = СписокДат[КоличествоДат - 1].Значение;
	КонецЕсли;

	Параметры = Новый Структура("НачалоПериода,КонецПериода,НаборПараметров", НачалоПериода, КонецПериода, МассивСтруктур);

	Оповещение = Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект, СтрокиПараметров);

	ИмяОбработки = ПолучитьИмяОбработки();
	ОткрытьФорму(ИмяОбработки + ".Форма.ФормаВыборПериода", Параметры, ЭтотОбъект, , , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
    ЗагрузитьДанныеВТзПараметры(); 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВТзПараметры()
	
	ДЗ = ДанныеФормыВЗначение(ДеревоЗапросов, Тип("ДеревоЗначений"));
	Ветка = ДЗ.Строки.Добавить();
	Ветка.ИД = Строка(Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmmss"));
	Ветка.Наименование = Строка(Формат(ТекущаяДатаСеанса(), "ДФ=yyyy MM HH:mm:ss"));
	Ветка.ВыполнитьВГруппе = 1;
	Для Каждого НоваяСтрока ИЗ РеквизитФормыВЗначение("Объект").ЗагрузитьДанныеВТзПараметры() Цикл;
		НоваяСтрокаДЗ = Ветка.Строки.Добавить();
		НоваяСтрокаДЗ.ИД = НоваяСтрока.ИДСтроки; 
		НоваяСтрокаДЗ.Текст = НоваяСтрока.Текст;
		НоваяСтрокаДЗ.ВыполнитьВГруппе = Ветка.ВыполнитьВГруппе;
		НоваяСтрокаДЗ.Наименование = НоваяСтрока.Наименование;                                                                       
	КонецЦикла;
	ЗначениеВДанныеФормы(ДЗ, ДеревоЗапросов);	
    ПараметрыСеанса.Конс_СписокЗапросов = Новый ХранилищеЗначения(Новый Массив)
	
КонецПроцедуры 