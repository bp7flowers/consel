#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Элемент = Элементы.Добавить("Таблица", Тип("ТаблицаФормы"), Элементы.ГруппаТаблицы);
	Элемент.ПутьКДанным = "Таблица";

	лТаблица		= ДанныеФормыВЗначение(Таблица			, Тип("ТаблицаЗначений"));
	РедакторКолонок = ДанныеФормыВЗначение(ОписаниеКолонок , Тип("ТаблицаЗначений"));

	ПараметрТаблицаЗначений = Неопределено;
	ПараметрАдрес = "";
	Отбор = Неопределено;
	Если Параметры.Свойство("ПараметрТаблицаЗначений", ПараметрТаблицаЗначений) Тогда

		Если ТипЗнч(ПараметрТаблицаЗначений) = Тип("Строка") Тогда
			Попытка
				ПараметрТаблицаЗначений = ЗначениеИзСтрокиВнутр(ПараметрТаблицаЗначений);
			Исключение
				ПараметрТаблицаЗначений = ПолучитьИзВременногоХранилища(ПараметрТаблицаЗначений);
			КонецПопытки;
		КонецЕсли;

		Если ТипЗнч(ПараметрТаблицаЗначений) = Тип("ТаблицаЗначений") Тогда
			лТаблица = ПараметрТаблицаЗначений;
			ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
			Для Каждого Колонка Из лТаблица.Колонки Цикл
				ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
			КонецЦикла;
		КонецЕсли;

	// вызов из строки пакета
	ИначеЕсли Параметры.Свойство("ПараметрАдрес", ПараметрАдрес) И НЕ ПустаяСтрока(ПараметрАдрес) Тогда

		пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);
		СтруктураТЗ = пХранилище.СтруктураТЗ;

		ТаблицаПакетов = пХранилище.ТаблицаПакетов;
		Отбор = Новый Структура("Адрес", ПараметрАдрес);
		МассивСтрок = ТаблицаПакетов.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Возврат;
		Иначе
				Строка = МассивСтрок[0];
				ТекстовыйДокумент.УстановитьТекст(Строка.ТекстМодуля);
		КонецЕсли;

		Если НЕ СтруктураТЗ.Свойство(ПараметрАдрес) Тогда
			Отказ = Истина;
		КонецЕсли;

		лТаблица = СтруктураТЗ[ПараметрАдрес];
		ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
		Для Каждого Колонка Из лТаблица.Колонки Цикл
			Если Колонка.ТипЗначения.Типы().Найти(Тип("МоментВремени")) <> Неопределено Тогда
				Колонка_ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения, "Строка", "МоментВремени");
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'В колонке ""%1"" изменён тип с ""МоментВремени"" на ""Строка"", т.к. значение с типом ""МоментВремени"" не отражается на ""Клиенте"".'"),Колонка.Имя);
				Сообщение.Сообщить();
			Иначе
				Колонка_ТипЗначения = Колонка.ТипЗначения;
			КонецЕсли;
			ДобавитьКолонку(Колонка.Имя, Колонка_ТипЗначения);
		КонецЦикла;

	ИначеЕсли Параметры.Свойство("ПутьКРезультатуЗапроса", Отбор) Тогда

		пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);
		РезультатЗапроса = пХранилище.СтруктурыРезультатовЗапросовТабДоков[Отбор.ИмяТабДокумента][Отбор.ИмяВыборки];

		лТаблица = РезультатЗапроса.Выгрузить();

		ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
		Для Каждого Колонка Из лТаблица.Колонки Цикл
			ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;

	ИначеЕсли Параметры.Свойство("ОтборПараметрЗапроса", Отбор) Тогда

		Если ЗначениеЗаполнено(Параметры.ОбъектПутьКХранилищу) И (Отбор <> Неопределено) Тогда
			пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);
			ТабПараметров = пХранилище.ТабПараметров;
			СтрокаПараметра = ТабПараметров.НайтиСтроки(Отбор)[0];
			лТаблица = СтрокаПараметра.Значение;
		Иначе
			лТаблица = Новый ТаблицаЗначений;
		КонецЕсли;

		Если НЕ ТипЗнч(лТаблица) = тип("ТаблицаЗначений") Тогда
			лТаблица = Новый ТаблицаЗначений;
		КонецЕсли;

		ВывестиКолонкиВРедактор(РедакторКолонок, лТаблица.Колонки);
		Для Каждого Колонка Из лТаблица.Колонки Цикл
			ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;

	КонецЕсли;

	ЗначениеВДанныеФормы(лТаблица		, Таблица		);
	ЗначениеВДанныеФормы(РедакторКолонок , ОписаниеКолонок);

	Элементы.ГруппаРедактораКолонок.Видимость = Ложь;

	СисИнфо = Новый СистемнаяИнформация;
	Объект.ВерсияПриложения = СисИнфо.ВерсияПриложения;

	Если Лев(Объект.ВерсияПриложения, 3) = "8.2" Тогда
		Объект.МодальностьРазрешена = Истина;
	Иначе
		РежимИспользованияМодальности = Метаданные["РежимИспользованияМодальности"];
		РежимИспользованияМодальности_Использовать = Метаданные["СвойстваОбъектов"].РежимИспользованияМодальности.Использовать;
		Объект.МодальностьРазрешена = РежимИспользованияМодальности = РежимИспользованияМодальности_Использовать;
	КонецЕсли;

	// ++ открытие редактора с пустой ТЗ
	Элементы.ОтсутствиеТаблицы.Видимость = Элементы.Таблица.ПодчиненныеЭлементы.Количество() = 0;
	// -- открытие редактора с пустой ТЗ

	КонтекстВыполнения = "Сервер";

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьЭлементыПоКонтекстуВыполнения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОписаниеКолонок

&НаКлиенте
Процедура ОписаниеКолонокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Копирование Тогда

		Элемент.ТекущиеДанные.ИсходноеИмяКолонки = "";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеКолонокПередУдалением(Элемент, Отказ)

	ТекущаяСтрока = ОписаниеКолонок.НайтиПоИдентификатору(Элементы.ОписаниеКолонок.ТекущаяСтрока);
	УдалитьКолонку(ТекущаяСтрока.ИмяКолонки, ТекущаяСтрока.ИсходноеИмяКолонки);
	ОписаниеКолонок.Удалить(ОписаниеКолонок.НайтиПоИдентификатору(ТекущаяСтрока.ПолучитьИдентификатор()));

КонецПроцедуры

&НаСервере
Процедура УдалитьКолонку(Имя, ИсходноеИмяКолонки)

	Если ИсходноеИмяКолонки = "" Тогда
		Возврат;
	КонецЕсли;

	ИмяПоиска = ?(ИсходноеИмяКолонки = "", Имя, ИсходноеИмяКолонки);

	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
	Колонка = лТаблица.Колонки.Найти(ИмяПоиска);
	КолонкиНет = Колонка = Неопределено;
	Если КолонкиНет Тогда
			Возврат;
	КонецЕсли;
	ЗначениеВДанныеФормы(лТаблица, Таблица);

	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивУдаляемыхРеквизитов.Добавить("Таблица." + ИсходноеИмяКолонки);
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);

	УдаляемыйЭлемент = Элементы.Найти(ИсходноеИмяКолонки);
	Элементы.Удалить(УдаляемыйЭлемент);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеКолонокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТекущаяСтрока = Элементы.ОписаниеКолонок.ТекущаяСтрока;
	РедактироватьКолонку(ТекущаяСтрока, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеКолонокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Элементы.ОтсутствиеТаблицы.Видимость = Элементы.Таблица.ПодчиненныеЭлементы.Количество() = 0;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьТаблицуИзФайла(Команда)

	Перем ВыбранноеИмя;
	Перем АдресВременногоХранилища;

	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|Если ПоместитьФайл(АдресВременногоХранилища, ВыбранноеИмя, ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		|	ЗагрузитьТаблицуИзФайлаЗавершение(Истина, АдресВременногоХранилища);
		|КонецЕсли;";
	Иначе
		ТекстКода = "
		|Оповещение = Новый ОписаниеОповещения(""ЗагрузитьТаблицуИзФайлаЗавершение"", ЭтотОбъект, Истина);
		|НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ВыбранноеИмя, Истина, УникальныйИдентификатор);";
	КонецЕсли;

	Выполнить(ТекстКода);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьТаблицуВФайл(Команда)

	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = '""Текст""'; en = '""Text""'")+"(*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения =
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	СохранитьТаблицуВФайлЗавершение(ДиалогОткрытияФайла.ПолноеИмяФайла, Неопределено);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранитьТаблицуВФайлЗавершение"", ЭтотОбъект, Неопределено);
		|ДиалогОткрытияФайла.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКолонки(Команда)

	Режим = НЕ Элементы.ФормаРедактироватьКолонки.Пометка;
	Элементы.ФормаРедактироватьКолонки.Пометка = Режим;
	Элементы.ГруппаРедактораКолонок.Видимость = Режим;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВОбъект(Команда)

	ПутьКФорме = ПолучитьИмяОбработки() + ".Форма.ФормаВыгрузкаВОбъект";
	ПараметрыОткрытия = Новый Структура;

	ПутьКХранилищу = "";
	ПередатьРезультат(ПутьКХранилищу);

	ПараметрыОткрытия.Вставить("ПутьКХранилищу", ПутьКХранилищу);

	ОткрытьФорму(ПутьКФорме, ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстЗапросаКТЧ(Команда)

	ТЗ = "ТЗ";
	ИмяВТ = "ВТ";
	ТекстВЫБРАТЬ = "ВЫБРАТЬ";
	ТекстПолей = "";

	Для Каждого Строка Из ОписаниеКолонок Цикл
		ТекстПолей = ТекстПолей + ?(ТекстПолей = "", "", ",") + Символы.ПС + "	" + ТЗ + "." + Строка.ИмяКолонки;
	КонецЦикла;

	ТекстХвоста = Символы.ПС + "ПОМЕСТИТЬ " + ИмяВТ + Символы.ПС + "ИЗ" + Символы.ПС + "	&" + ТЗ + " КАК " + ТЗ;

	ТекстЗапроса = ТекстВЫБРАТЬ + ТекстПолей + ТекстХвоста;

	ТекстовыйДокумент.ДобавитьСтроку(ТекстЗапроса);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	Если КонтекстВыполнения = "Сервер" Тогда
		ВыполнитьКодСервер();
	Иначе
		ВыполнитьКодКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сервер(Команда)
	КонтекстВыполнения = "Сервер";
	ОбновитьЭлементыПоКонтекстуВыполнения();
КонецПроцедуры

&НаКлиенте
Процедура Клиент(Команда)
	КонтекстВыполнения = "Клиент";
	ОбновитьЭлементыПоКонтекстуВыполнения();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПроведенияДокументов(Команда)

	Текст =
	"Для Каждого Строка Из Результат Цикл
	|
	|	ДокОбъект = Строка.Ссылка.ПолучитьОбъект();
	|	ДокОбъект.ОбменДанными.Загрузка = Истина;
	|	Попытка
	|		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	|		//	Строка.Готово = Истина;
	|	Исключение
	|		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Ошибка! ""+ Строка(ДокОбъект));
	|	КонецПопытки;
	|
	|КонецЦикла;
	|
	|ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""Готово!"");
	|";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстЦикла(Команда)

	Текст =
	"Для Каждого Строка Из Результат Цикл
	|
	|	//	ОбработкаПрерыванияПользователя();
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПолученияУникальногоИдентификатора(Команда)

	Текст =
	"Для Каждого Строка Из Результат Цикл
	|
	|	пСсылка = Строка.Ссылка;
	|
	|	УИ = пСсылка.УникальныйИдентификатор();
	|	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(пСсылка.Ссылка) + "": "" + УИ);
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПолученияУникальногоИдентификатора_ДобавитьКолонкуВТЗ(Команда)

	СоздатьКолонкуУИ();

	Текст =
	"Для Каждого Строка Из Результат Цикл
	|
	|	пСсылка = Строка.Ссылка;
	|
	|	Строка.УИ = пСсылка.УникальныйИдентификатор();
	|	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(пСсылка.Ссылка) + "": "" + УИ);
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстОбработкиДвиженийРегистраБухгалтерии(Команда)

	Текст =
	"Для Каждого Строка Из Результат Цикл
	|
	|//	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	|//	НаборЗаписей.Отбор.Регистратор.Установить(Строка.Ссылка);
	|//	НаборЗаписей.Прочитать();
	|//
	|//	Если НаборЗаписей.Количество() = 0 Тогда
	|//		Возврат;
	|//	КонецЕсли;
	|//
	|//	Для Каждого Запись Из НаборЗаписей Цикл
	|//
	|//		Если Запись.СчетДт.НалоговыйУчет Тогда
	|//			Запись.СуммаНУДт = Запись.Сумма;
	|//		КонецЕсли;
	|//		Если Запись.СчетКт.НалоговыйУчет Тогда
	|//			Запись.СуммаНУКт = Запись.Сумма;
	|//		КонецЕсли;
	|//
	|//	КонецЦикла;
	|//
	|//	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	|//	НаборЗаписей.Записать();
	|//
	|//	ДокументОбъект = Строка.Ссылка.ПолучитьОбъект();
	|//	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	|//	ДокументОбъект.РучнаяКорректировка	= Истина;
	|//	ДокументОбъект.Комментарий	= ""#Добавлено подразделение внешней обработкой. "" + ДокументОбъект.Комментарий;
	|//	ДокументОбъект.Записать();
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстПометкиНаУдаление(Команда)

	Текст =
	"Для Каждого Строка Из Результат Цикл
	|
	|	ДокументОбъект = Строка.Ссылка.ПолучитьОбъект();
	|	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	|	ДокументОбъект.УстановитьПометкуУдаления(Истина);
	|	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(ДокОбъект));
	|
	|КонецЦикла;";

	ТекстовыйДокумент.ДобавитьСтроку(Текст);

КонецПроцедуры

// ++ ВЫГРУЗКА XML
&НаКлиенте
Процедура Выгрузить_В_XML(Команда)

	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПолучитьСписокКолонок();

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Значение = СписокВыбора.ВыбратьЭлемент(""Выберите колонку"", СписокВыбора.НайтиПоЗначению(""Ссылка""));
		|ВыборКолонкиДляВыгрузки_В_XML(Значение, Неопределено);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ВыборКолонкиДляВыгрузки_В_XML"", ЭтотОбъект);
		|СписокВыбора.ПоказатьВыборЭлемента(Оповещение, ""Выберите колонку"", СписокВыбора.НайтиПоЗначению(""Ссылка""));";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИз_XML(Команда)

	ТекстВопроса = НСтр("ru='Загрузка может затереть имеющиеся объекты. Загрузить объекты из файла?'");
	лПараметры = Новый Структура;

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		|ВопросОЗагрузкеВ_XML(Ответ, лПараметры);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ВопросОЗагрузкеВ_XML"", ЭтотОбъект, лПараметры);
		|ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстМодуля(Команда)

	ТекстовыйДокумент.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)

	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;

	Элементы.ТекстовыйДокумент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

	лТекстовыйДокумент = Новый ТекстовыйДокумент;
	лТекстовыйДокумент.УстановитьТекст(ТекстовыйДокумент.ПолучитьТекст());

	ПоследняяСтрока = лТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;

	МаксимальныйОтступ = 0;
	МинимальныйОтступ = 0;
	Для i = НачалоСтроки По КонецСтроки Цикл
		Строка = лТекстовыйДокумент.ПолучитьСтроку(i);
		Строка = СтрЗаменить(Строка," "+" ","	");
		СимволовСлева = СтрНайти(Строка, СокрЛП(Строка));
		МаксимальныйОтступ = Макс(СимволовСлева, МаксимальныйОтступ);
		МинимальныйОтступ = ?(МинимальныйОтступ = 0, МаксимальныйОтступ, МинимальныйОтступ);
		МинимальныйОтступ = Мин(МаксимальныйОтступ, МинимальныйОтступ );
	КонецЦикла;

	ТексДляВыделения = "";
	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1);
	Для i = НачалоСтроки По КонСтроки Цикл
		Строка = лТекстовыйДокумент.ПолучитьСтроку(i);
		Строка = СтрЗаменить(Строка," "+" ","	");
		Строка = Лев(Строка, МинимальныйОтступ-1) + "//" + Сред(Строка, МинимальныйОтступ);
		лТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
		ТексДляВыделения = ТексДляВыделения + Символы.ПС + Строка;
	КонецЦикла;

	ТекстовыйДокумент.УстановитьТекст(лТекстовыйДокумент.ПолучитьТекст());

	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстовыйДокумент;
	ЭтотОбъект.ОбновитьОтображениеДанных();
	Элементы.ТекстовыйДокумент.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомментарий(Команда)

	Текст = ТекстовыйДокумент.ПолучитьТекст();

	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;

	Элементы.ТекстовыйДокумент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

	лТекстовыйДокумент = Новый ТекстовыйДокумент;
	лТекстовыйДокумент.УстановитьТекст(Текст);

	ПоследняяСтрока = лТекстовыйДокумент.ПолучитьСтроку(КонецСтроки);
	ВыделеноСимволовНаПоследнейСтроке = СтрДлина(Лев(ПоследняяСтрока, КонецКолонки - 1));
	ЗакомментироватьПоследнююСтроку = Истина;
	Если (НачалоСтроки <> КонецСтроки) И ВыделеноСимволовНаПоследнейСтроке = 0 Тогда
		ЗакомментироватьПоследнююСтроку = Ложь;
	КонецЕсли;

	КонСтроки = ?(ЗакомментироватьПоследнююСтроку, КонецСтроки, КонецСтроки - 1);
	Для i = НачалоСтроки По КонСтроки Цикл
		Строка = лТекстовыйДокумент.ПолучитьСтроку(i);
		Вхождение = СтрНайти(Строка, "//");
		Если Вхождение > 0 Тогда
			Строка = Лев(Строка, Вхождение-1) + Сред(Строка, Вхождение + 2);
		КонецЕсли;
		лТекстовыйДокумент.ЗаменитьСтроку(i, Строка);
	КонецЦикла;

	ТекстовыйДокумент.УстановитьТекст(лТекстовыйДокумент.ПолучитьТекст());
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстовыйДокумент;
	ЭтотОбъект.ОбновитьОтображениеДанных();
	Элементы.ТекстовыйДокумент.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + ?(ЗакомментироватьПоследнююСтроку, 1, 0), 1);

КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)

	ПутьКХранилищу = Неопределено;
	ПередатьРезультат(ПутьКХранилищу);
	Закрыть(ПутьКХранилищу);

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)

	Закрыть(Неопределено);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьТаблицуВФайлЗавершение(Путь, Параметры) Экспорт

	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		пПутьКФайлу = Путь;
	ИначеЕсли ТипЗнч(Путь) = Тип("Массив") Тогда
		пПутьКФайлу = Путь[0];
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в имени сохранении файла!");
	КонецЕсли;
////////////////////////////////////////////////////////////
	Адрес = ПолучитьФайл_();
	Описание = Новый ОписаниеПередаваемогоФайла(пПутьКФайлу, Адрес);
	МассивОписаний = Новый Массив;
	МассивОписаний.Добавить(Описание);

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|ПолучитьФайлы(МассивОписаний, , , Ложь);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранениеФайлаНаДиск"", ЭтотОбъект, Неопределено);
		|НачатьПолучениеФайлов(Оповещение, МассивОписаний, , Ложь);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаСервере
Функция ПолучитьФайл_()

	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));

	ПутьНаСервере = ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ПутьНаСервере, лТаблица);

	Двоичное = Новый ДвоичныеДанные(ПутьНаСервере);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	УдалитьФайлы(ПутьНаСервере);
	Возврат Адрес;

КонецФункции

&НаСервере
Процедура СохранениеФайлаНаДиск(ПолученныеФайлы, Параметры) Экспорт
	// Не удалять!
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуИзФайлаЗавершение(Заглушка = Неопределено, АдресВременногоХранилища = Неопределено, ИмяФайла = Неопределено, Параметры = Неопределено) Экспорт

	ФайлВХранилище = НЕ АдресВременногоХранилища = Неопределено;
	ФайлНаДиске = НЕ ИмяФайла = Неопределено;

	Если ФайлВХранилище Тогда
		ПутьНаСервере = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ДвоичныеДанные.Записать(ПутьНаСервере);
	ИначеЕсли ФайлНаДиске Тогда
		ПутьНаСервере = ИмяФайла;
		пФайл = Новый Файл(ПутьНаСервере);
		Если НЕ пФайл.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указанный файл не найден!");
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
	РедакторКолонок = ДанныеФормыВЗначение(ОписаниеКолонок, Тип("ТаблицаЗначений"));
	лТаблица.Очистить();
	лТаблица.Колонки.Очистить();
	РедакторКолонок.Очистить();

	Попытка
		ПолученноеЗначение = ЗначениеИзФайла(ПутьНаСервере);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка при получении файла! Описание: %1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;

	Если ФайлВХранилище Тогда
		УдалитьФайлы(ПутьНаСервере);
	КонецЕсли;

	Если (НЕ ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений"))
		Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Загружаемый файл не является таблицей значений!'")));
		Возврат;
	КонецЕсли;

	лТаблица = ПолученноеЗначение;

	КолКол = Элементы.Таблица.ПодчиненныеЭлементы.Количество();
	МассивУдаляемыхРеквизитов = Новый Массив;
	Пока КолКол > 0 Цикл
		МассивУдаляемыхРеквизитов.Добавить("Таблица." + Элементы.Таблица.ПодчиненныеЭлементы[КолКол - 1].Имя);
		Элементы.Удалить(Элементы.Таблица.ПодчиненныеЭлементы[КолКол - 1]);
		КолКол = КолКол - 1;
	КонецЦикла;
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);

	ВывестиКолонкиВРедактор(РедакторКолонок, ПолученноеЗначение.Колонки);
	Для Каждого Колонка Из ПолученноеЗначение.Колонки Цикл
		ДобавитьКолонку(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;

	ЗначениеВДанныеФормы(лТаблица, Таблица);
	ЗначениеВДанныеФормы(РедакторКолонок, ОписаниеКолонок);

	// ++ открытие редактора с пустой ТЗ
	Элементы.ОтсутствиеТаблицы.Видимость = Элементы.Таблица.ПодчиненныеЭлементы.Количество() = 0;
	// -- открытие редактора с пустой ТЗ

КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодСервер()

	Результат = Таблица;
	Выполнить(ТекстовыйДокумент.ПолучитьТекст());

КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкуУИ()

	Табл = РеквизитФормыВЗначение("Таблица");
	Если Табл.Колонки.Найти("УИ") = Неопределено Тогда
		ДобавитьКолонку("УИ", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	КонецЕсли;

КонецПроцедуры // ПроверитьНаличиеКолонки()

&НаСервере
Функция ПолучитьСписокКолонок()

	СписокВыбора = Новый СписокЗначений;
	лТаблица = РеквизитФормыВЗначение("Таблица");

	Для Каждого Колонка Из лТаблица.Колонки Цикл
		СписокВыбора.Добавить(Колонка.Имя);
	КонецЦикла;

	Возврат СписокВыбора;

КонецФункции

&НаКлиенте
Процедура ВыборКолонкиДляВыгрузки_В_XML(лРезультат, лПараметры) Экспорт

	Если лРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	лПараметры = Новый Структура;
	лПараметры.Вставить("ИмяВыгружаемойКолонки", лРезультат.Значение);

	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = '""Текст""'; en = '""Text""'")+"(*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения =
		"Если ДиалогОткрытияФайла.Выбрать() Тогда
		|	ВыбратьПутьВыгрузкиВ_XML(ДиалогОткрытияФайла.ПолноеИмяФайла, лПараметры);
		|КонецЕсли;";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""ВыбратьПутьВыгрузкиВ_XML"", ЭтотОбъект, лПараметры);
		|ДиалогОткрытияФайла.Показать(Оповещение);";
	КонецЕсли;

	Выполнить(КодВыполнения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПутьВыгрузкиВ_XML(Путь, лПараметры) Экспорт

	Если Путь = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Путь) = Тип("Строка") Тогда
		ПутьНаКлиенте = Путь;
	ИначеЕсли ТипЗнч(Путь) = Тип("Массив") Тогда
		ПутьНаКлиенте = Путь[0];
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в имени сохранении файла!");
	КонецЕсли;

	МассивОписаний = Новый Массив;
	СоздатьФайлВыгрузкиВ_XML(Таблица, МассивОписаний, ПутьНаКлиенте, лПараметры.ИмяВыгружаемойКолонки);

	Если Объект.МодальностьРазрешена Тогда
		КодВыполнения = "
		|ПолучитьФайлы(МассивОписаний, , , Ложь);";
	Иначе
		КодВыполнения = "
		|Оповещение = Новый ОписаниеОповещения(""СохранениеФайлаНаДиск"", ЭтотОбъект, Неопределено);
		|НачатьПолучениеФайлов(Оповещение, МассивОписаний, , Ложь);";
	КонецЕсли;

	Выполнить(КодВыполнения);

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Загрузка завершена.'");
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервере
Процедура СоздатьФайлВыгрузкиВ_XML(Знач Результат, МассивОписаний, ПутьНаКлиенте, ИмяВыгружаемойКолонки)

	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("tmp");
	Файл = Новый ЗаписьXML;
	Файл.ОткрытьФайл(ВременноеИмяФайла, "windows-1251");
	Файл.ЗаписатьОбъявлениеXML();
	Файл.ЗаписатьНачалоЭлемента("Документ");

	Для Каждого Строка Из Результат Цикл
		Попытка
			ЗаписатьXML(Файл, Строка[ИмяВыгружаемойКолонки].ПолучитьОбъект(), НазначениеТипаXML.Явное);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка " + Строка.Ссылка);
		КонецПопытки;
	КонецЦикла;

	Файл.ЗаписатьКонецЭлемента();
	Файл.Закрыть();

	Двоичное = Новый ДвоичныеДанные(ВременноеИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	УдалитьФайлы(ВременноеИмяФайла);

	Описание = Новый ОписаниеПередаваемогоФайла(ПутьНаКлиенте, Адрес);
	МассивОписаний.Добавить(Описание);

КонецПроцедуры
// -- ВЫГРУЗКА XML

// ++ ЗАГРУЗКА XML
&НаКлиенте
Процедура ВопросОЗагрузкеВ_XML(Ответ, лПараметры) Экспорт

	Перем ВыбранноеИмя;
	Перем АдресВременногоХранилища;

	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если Объект.МодальностьРазрешена Тогда
		ТекстКода = "
		|Если ПоместитьФайл(АдресВременногоХранилища, ВыбранноеИмя, ВыбранноеИмя, Истина, УникальныйИдентификатор) Тогда
		|	СоздатьОбъектыИз_XML(Истина, АдресВременногоХранилища);
		|КонецЕсли;";
	Иначе
		ТекстКода = "
		|Оповещение = Новый ОписаниеОповещения(""СоздатьОбъектыИз_XML"", ЭтотОбъект, Истина);
		|НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ВыбранноеИмя, Истина, УникальныйИдентификатор);";
	КонецЕсли;

	Выполнить(ТекстКода);

КонецПроцедуры

&НаСервере
Процедура СоздатьОбъектыИз_XML(Заглушка = Неопределено, АдресВременногоХранилища = Неопределено, ИмяФайла = Неопределено, Параметры = Неопределено) Экспорт

	ФайлВХранилище = НЕ АдресВременногоХранилища = Неопределено;
	ФайлНаДиске = НЕ ИмяФайла = Неопределено;

	Если ФайлВХранилище Тогда
		ПутьНаСервере = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ДвоичныеДанные.Записать(ПутьНаСервере);
	ИначеЕсли ФайлНаДиске Тогда
		ПутьНаСервере = ИмяФайла;
		пФайл = Новый Файл(ПутьНаСервере);
		Если НЕ пФайл.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указанный файл не найден!");
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Файл = Новый ЧтениеXML;
	Файл.ОткрытьФайл(ПутьНаСервере);
	Файл.Прочитать();
	Файл.Прочитать();
	лОбъект = 0;
	Пока Файл.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		Попытка
			лОбъект = ПрочитатьXML(Файл);
			лОбъект.ОбменДанными.Загрузка = Истина;
			лОбъект.Записать();
		Исключение
			ЖурналРегистрацииВызовСервера.ЗаписатьИсключениеВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина);
		КонецПопытки;
	КонецЦикла;

	Файл.Закрыть();

	Если ФайлВХранилище Тогда
		УдалитьФайлы(ПутьНаСервере);
	КонецЕсли;

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Загрузка завершена.'");
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервере
Процедура ПередатьРезультат(ПутьКХранилищу)

	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
	пХранилище = ПолучитьИзВременногоХранилища(Параметры.ОбъектПутьКХранилищу);

	ТаблицаПакетов = пХранилище.ТаблицаПакетов;

	Если НЕ ПустаяСтрока(Параметры.ПараметрАдрес) Тогда

		Отбор = Новый Структура("Адрес", Параметры.ПараметрАдрес);
		МассивСтрок = ТаблицаПакетов.НайтиСтроки(Отбор);
		Если МассивСтрок.Количество() = 0 Тогда
			Возврат;
		Иначе
			Строка = МассивСтрок[0];
			Строка.ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
		КонецЕсли;

	КонецЕсли;

	Если Параметры.ОтборПараметрЗапроса <> Неопределено Тогда

		ТабПараметров = пХранилище.ТабПараметров;

		СтрокаПараметра = ТабПараметров.НайтиСтроки(Параметры.ОтборПараметрЗапроса)[0];

		СтрокаПараметра.Значение = лТаблица;

	КонецЕсли;

	ПутьКХранилищу = ПоместитьВоВременноеХранилище(лТаблица);

КонецПроцедуры // ПередатьРезультат()

&НаСервере
Процедура ВывестиКолонкиВРедактор(РедакторКолонок, Колонки)

	РедакторКолонок.Очистить();
	Для Каждого Колонка Из Колонки Цикл

		НоваяСтрока = РедакторКолонок.Добавить();
		НоваяСтрока.ИмяКолонки = Колонка.Имя;
		НоваяСтрока.ТипДанных = Колонка.ТипЗначения;
		НоваяСтрока.ИсходноеИмяКолонки = Колонка.Имя;

	КонецЦикла;

КонецПроцедуры // ВывестиКолонкиВРедактор()

&НаСервере
Процедура ДобавитьКолонку(Имя, ТипЗначения)

	МассивДобавляемыхРеквизитов = Новый Массив;
	РеквизитФормы = Новый РеквизитФормы(Имя, ТипЗначения, "Таблица", Имя);
	МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	Элемент = Элементы.Добавить(Имя, Тип("ПолеФормы"), Элементы.Таблица);
	Элемент.ПутьКДанным = "Таблица." + Имя;
	Элемент.Вид = ВидПоляФормы.ПолеВвода;

КонецПроцедуры

&НаСервере
Процедура РедактироватьКолонку(ТекущаяСтрока, Отказ)

	ТекСтрока = ОписаниеКолонок.НайтиПоИдентификатору(ТекущаяСтрока);
	Отбор = Новый Структура("ИмяКолонки,ТипДанных,ИсходноеИмяКолонки", ТекСтрока.ИмяКолонки, ТекСтрока.ТипДанных, ТекСтрока.ИсходноеИмяКолонки);

	пОписаниеКолонок = РеквизитФормыВЗначение("ОписаниеКолонок", Тип("ТаблицаЗначений"));
	пТекСтрока = пОписаниеКолонок.НайтиСтроки(Отбор)[0];

	Имя				= пТекСтрока.ИмяКолонки;
	ТипЗначения		= пТекСтрока.ТипДанных;
	ИсходноеИмяКолонки = пТекСтрока.ИсходноеИмяКолонки;

	Для Каждого пСтрока Из пОписаниеКолонок Цикл

		Если пОписаниеКолонок.Индекс(пСтрока) = пОписаниеКолонок.Индекс(пТекСтрока) Тогда
			Продолжить;
		КонецЕсли;

		Если пСтрока.ИмяКолонки = пТекСтрока.ИмяКолонки Тогда
			пТекСтрока.ИмяКолонки = пТекСтрока.ИмяКолонки + "_";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отказ! Такое имя поля уже есть!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;

	ИмяПоиска = ?(ИсходноеИмяКолонки = "", Имя, ИсходноеИмяКолонки);

	лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
	Колонка = лТаблица.Колонки.Найти(ИмяПоиска);
	КолонкиНет = Колонка = Неопределено;
	Если НЕ КолонкиНет Тогда
		ИсходныеДанныеКолонки = лТаблица.ВыгрузитьКолонку(Колонка);
	КонецЕсли;
	ЗначениеВДанныеФормы(лТаблица, Таблица);

	Если КолонкиНет Тогда
		МассивДобавляемыхРеквизитов = Новый Массив;
		РеквизитФормы = Новый РеквизитФормы(Имя, ТипЗначения, "Таблица", Имя);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

		Элемент = Элементы.Добавить(Имя, Тип("ПолеФормы"), Элементы.Таблица);
		Элемент.ПутьКДанным = "Таблица." + Имя;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Иначе

		Если (Колонка.ТипЗначения = ТипЗначения) И (ИсходноеИмяКолонки = Имя) Тогда
			Возврат;
		КонецЕсли;

		ИзменилосьИмя = НЕ ИсходноеИмяКолонки = Имя;

		Если НЕ ИзменилосьИмя Тогда

			МассивУдаляемыхРеквизитов = Новый Массив;
			МассивУдаляемыхРеквизитов.Добавить("Таблица." + ИсходноеИмяКолонки);
			ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);

			МассивДобавляемыхРеквизитов = Новый Массив;
			РеквизитФормы = Новый РеквизитФормы(Имя + "_", ТипЗначения, "Таблица", Имя + "_");
			МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
			ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

			УдаляемыйЭлемент = Элементы.Найти(ИсходноеИмяКолонки);

			Элемент = Элементы.Вставить(Имя + "_", Тип("ПолеФормы"), Элементы.Таблица, УдаляемыйЭлемент);
			Элемент.ПутьКДанным = "Таблица." + Имя + "_";
			Элемент.Вид = ВидПоляФормы.ПолеВвода;

			Элементы.Удалить(УдаляемыйЭлемент);

			ИсходноеИмяКолонки = Имя + "_";

		КонецЕсли;

		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить("Таблица." + ИсходноеИмяКолонки);
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);

		МассивДобавляемыхРеквизитов = Новый Массив;
		РеквизитФормы = Новый РеквизитФормы(Имя, ТипЗначения, "Таблица", Имя);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

		УдаляемыйЭлемент = Элементы.Найти(ИсходноеИмяКолонки);

		Элемент = Элементы.Вставить(Имя, Тип("ПолеФормы"), Элементы.Таблица, УдаляемыйЭлемент);
		Элемент.ПутьКДанным = "Таблица." + Имя;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;

		Элементы.Удалить(УдаляемыйЭлемент);

		лТаблица = ДанныеФормыВЗначение(Таблица, Тип("ТаблицаЗначений"));
		Колонка = лТаблица.Колонки.Найти(Имя);
		лТаблица.ЗагрузитьКолонку(ИсходныеДанныеКолонки, Колонка);
		ЗначениеВДанныеФормы(лТаблица, Таблица);

	КонецЕсли;

	пТекСтрока.ИсходноеИмяКолонки = пТекСтрока.ИмяКолонки;
	ЗначениеВДанныеФормы(пОписаниеКолонок, ОписаниеКолонок);

КонецПроцедуры // РедактироватьКолонку()

&НаСервере
Функция ПолучитьИмяОбработки()

	Возврат РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();

КонецФункции

&НаКлиенте
Процедура ВыполнитьКодКлиент()

	Результат = Таблица;
	Выполнить(ТекстовыйДокумент.ПолучитьТекст());

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыПоКонтекстуВыполнения()

	Подменю = Элементы.Контекст;
	ТекстПоУмолчанию = НСтр("ru = 'Контекст'");
	Подменю.Заголовок = СтрШаблон("%1: %2", ТекстПоУмолчанию, ЭтотОбъект.КонтекстВыполнения);

	Контексты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Сервер", "Клиент");
	Для Каждого Контекст Из Контексты Цикл
		Элементы[Контекст].Пометка = Элементы[Контекст].Имя = КонтекстВыполнения;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
